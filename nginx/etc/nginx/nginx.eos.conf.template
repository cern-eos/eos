#-------------------------------------------------------------------------------
# Copyright (c) 2012-2013 by European Organization for Nuclear Research (CERN)
#
# File: nginx.eos.conf
# Author: Justin Salmon <jsalmon@cern.ch>
#-------------------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with This program.  If not, see <http:#www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# The EOS nginx service uses two virtual hosts with different authentication
# schemes to allow flexible authenticated access.
#
# The first vhost uses SSL with (optional) client certificate verification. If
# the client provides no certificate (or an invalid one) then limited access
# will still be granted (as user "nobody") and the traffic will still be 
# encrypted via SSL. The default port for this is 443 (in /etc/sysconfig/nginx)
# 
# The second vhost runs Kerberos authentication over SSL. It does not ask for
# or attempt to verify a client SSL certificate. The Kerberos credentials
# must be supplied, otherwise access will be denied (the gateway will return a
# 401 Authorization Required code). The default port for this is 8443.
#-------------------------------------------------------------------------------


user              EOS_NGINX_USER;
worker_processes  64;
error_log         /var/log/nginx/error.log info;
pid               /var/run/nginx.pid;

env OPENSSL_ALLOW_PROXY_CERTS;

events {
    worker_connections  1024;
}

http {
    default_type  application/octet-stream;

    log_format    main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
    access_log         /var/log/nginx/access.log 
                       main;

    sendfile               on;
    keepalive_timeout      65;
    client_max_body_size   1000000m;
    #tcp_nopush            on;
    #gzip                  on;
    #keepalive_timeout     0;
    
    auth_ldap_cache_enabled on;
    auth_ldap_cache_expiration_time 10000;
    auth_ldap_cache_size 1000;

    # Load config files from the /etc/nginx/conf.d directory
    # The default server is in conf.d/default.conf
    # include /etc/nginx/conf.d/*.conf;

    ldap_server auth_ldap_server {
        url "EOS_NGINX_LDAP_URL";
        binddn "EOS_NGINX_LDAP_BINDDN_USER";
        binddn_passwd "EOS_NGINX_LDAP_BINDDN_PASSWORD";
        require valid_user;
	satisfy any;
    }


    # Virtual host 1: SSL with client certificate authentication
    server {
        server_name  EOS_NGINX_HOSTNAME;
        listen       EOS_NGINX_CLIENT_SSL_PORT;

        ssl                    on;
        ssl_protocols          SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate        EOS_NGINX_SSL_CERTIFICATE;
        ssl_certificate_key    EOS_NGINX_SSL_KEY;
        ssl_client_certificate EOS_NGINX_SSL_CLIENT_CERTIFICATE;
        ssl_verify_client      optional;
        ssl_verify_depth       10;
	ssl_ciphers            ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;	
	ssl_session_cache      shared:SSL:10m;
        ssl_session_timeout    10m;
	
        location / {

            proxy_pass         EOS_NGINX_MGM_URL;

            proxy_set_header   Host               $host;
	    proxy_set_header   Auth-Type          "x509";
            proxy_set_header   X-Real-IP          $remote_addr;
            proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header   SSL_CLIENT_S_DN    $ssl_client_s_dn;
            proxy_set_header   SSL_CLIENT_I_DN    $ssl_client_i_dn;
            proxy_set_header   SSL_CLIENT_VERIFY  $ssl_client_verify;
	    proxy_pass_request_body off;
	    
            client_body_buffer_size     128k;

            proxy_connect_timeout       90;
            proxy_send_timeout          90;
            proxy_read_timeout          90;

            proxy_buffer_size           256k;
            proxy_buffers               8 256k;
            proxy_busy_buffers_size     512k;
            proxy_temp_file_write_size  512k;
        }

        # Proxy download 
        location ~* ^/internal_redirect/(.*):(.*?)/(.*) {

            # Do not allow people to mess with this location directly
            # Only internal redirects are allowed
            internal;
            
            # Necessary when using variable proxy_pass directive
            resolver 127.0.0.1;

            # Location-specific logging
            access_log /var/log/nginx/x509.internal_redirect.access.log main;
            error_log  /var/log/nginx/x509.internal_redirect.error.log  ;

            # Extract download url from the request
            set $download_host $1;
            set $download_port $2;
            set $download_uri  $3;

            # Compose download url
            set $download_url http://$download_host:$download_port/$download_uri?$args;

            # Set download request headers
            proxy_set_header Host          $download_host:$download_port;
            proxy_set_header Authorization '';

            # The next two lines could be used if your storage 
            # backend does not support Content-Disposition 
            # headers used to specify file name browsers use 
            # when save content to the disk
            # proxy_hide_header Content-Disposition;
            # add_header Content-Disposition 'attachment; filename="$args"';

            # Do not touch local disks when proxying 
            # content to clients
            proxy_max_temp_file_size 0;


            # If we are redirecting externally, return the redirect response
            # back to the client.
            set $redirect_externally EOS_NGINX_REDIRECT_EXTERNALLY;
            if ($redirect_externally)
            {
                return 307 $download_url;
            }

            # Otherwise, download the file directly from the backend and stream
            # it to the client.
            proxy_pass $download_url;
        }
    }


    # Virtual host 2: SSL with kerberos authentication
    server {
        server_name  EOS_NGINX_HOSTNAME;
        listen       EOS_NGINX_GSS_PORT;

        ssl                    on;
        ssl_protocols          SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate        EOS_NGINX_SSL_CERTIFICATE;
        ssl_certificate_key    EOS_NGINX_SSL_KEY;
        ssl_client_certificate EOS_NGINX_SSL_CLIENT_CERTIFICATE;
        ssl_verify_client      off;
        ssl_verify_depth       10;
	ssl_ciphers            ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;	
	ssl_session_cache      shared:SSL:10m;
        ssl_session_timeout    10m;

        location / {

            proxy_pass         EOS_NGINX_MGM_URL;

            proxy_set_header   Host               $host;
	    proxy_set_header   Auth-Type          "krb5";
            proxy_set_header   X-Real-IP          $remote_addr;
            proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
	    proxy_pass_request_body off;
	    
            client_body_buffer_size     128k;

            proxy_connect_timeout       90;
            proxy_send_timeout          90;
            proxy_read_timeout          90;

            proxy_buffer_size           256k;
            proxy_buffers               8 256k;
            proxy_busy_buffers_size     512k;
            proxy_temp_file_write_size  512k;

            # Kerberos
            auth_gss              on;
            auth_gss_keytab       EOS_NGINX_GSS_KEYTAB;
            auth_gss_realm        EOS_NGINX_GSS_REALM;
            auth_gss_service_name EOS_NGINX_GSS_SERVICE_NAME;

            proxy_set_header      Remote-User $remote_user;
        }

        # Proxy download 
        location ~* ^/internal_redirect/(.*?)/(.*) {

            # Do not allow people to mess with this location directly
            # Only internal redirects are allowed
            internal;
            
            # Necessary when using variable proxy_pass directive
            resolver 127.0.0.1;

            # Location-specific logging
            access_log /var/log/nginx/krb5.internal_redirect.access.log main;
            error_log  /var/log/nginx/krb5.internal_redirect.error.log  ;

            # Extract download url from the request
            set $download_uri  $2;
            set $download_host $1;

            # Compose download url
            set $download_url http://$download_host/$download_uri?$args;

            # Set download request headers
            proxy_set_header Host          $download_host;
            proxy_set_header Authorization '';

            # The next two lines could be used if your storage 
            # backend does not support Content-Disposition 
            # headers used to specify file name browsers use 
            # when save content to the disk
            # proxy_hide_header Content-Disposition;
            # add_header Content-Disposition 'attachment; filename="$args"';

            # Do not touch local disks when proxying 
            # content to clients
            proxy_max_temp_file_size 0;


            # If we are redirecting externally, return the redirect response
            # back to the client.
            set $redirect_externally EOS_NGINX_REDIRECT_EXTERNALLY;
            if ($redirect_externally)
            {
                return 307 $download_url;
            }

            # Otherwise, download the file directly from the backend and stream
            # it to the client.
            proxy_pass $download_url;
        }
    }

    # Virtual host 3: SSL with ldap basic authentication
    server {
        server_name  EOS_NGINX_HOSTNAME;
        listen       EOS_NGINX_LDAP_SSL_PORT;

        ssl                    on;
        ssl_protocols          SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate        EOS_NGINX_SSL_CERTIFICATE;
        ssl_certificate_key    EOS_NGINX_SSL_KEY;
        ssl_client_certificate EOS_NGINX_SSL_CLIENT_CERTIFICATE;
        ssl_verify_client      off;
        ssl_verify_depth       10;
	ssl_ciphers            ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;	
	ssl_session_cache      shared:SSL:10m;
        ssl_session_timeout    10m;


        # allow Owncloud clients to retrieve the server version without authentication
	location ~* /(status.php)$ {

            proxy_pass         EOS_NGINX_MGM_URL;

            proxy_set_header   Host               $host;
	    proxy_set_header   Auth-Type          "ldap";
            proxy_set_header   X-Real-IP          $remote_addr;
            proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header   Remote-User nobody;
            proxy_set_header   Authorization '';
        }

        location / {
            proxy_pass         EOS_NGINX_MGM_URL;
            proxy_set_header   Authorization '';

            proxy_set_header   Host               $host;
	    proxy_set_header   Auth-Type          "ldap";
            proxy_set_header   X-Real-IP          $remote_addr;
            proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header      Remote-User $remote_user;
	    proxy_pass_request_body off;
            client_body_buffer_size     128k;

            proxy_connect_timeout       90;
            proxy_send_timeout          90;
            proxy_read_timeout          90;

            proxy_buffer_size           256k;
            proxy_buffers               8 256k;
            proxy_busy_buffers_size     512k;
            proxy_temp_file_write_size  512k;
   
            auth_ldap "Please provide your account information here:";
            auth_ldap_servers auth_ldap_server;
        }

        # Proxy download 
        location ~* ^/internal_redirect/(.*):(.*?)/(.*) {

            # Do not allow people to mess with this location directly
            # Only internal redirects are allowed
            internal;
            
            # Necessary when using variable proxy_pass directive
            resolver 127.0.0.1;

            # Location-specific logging
            access_log /var/log/nginx/ldap.internal_redirect.access.log main;
            error_log  /var/log/nginx/ldap.internal_redirect.error.log  ;

            # Extract download url from the request
            set $download_host $1;
            set $download_port $2;
            set $download_uri  $3;

            # Compose download url
            set $download_url http://$download_host:$download_port/$download_uri?$args;

            # Set download request headers
            proxy_set_header Host          $download_host:$download_port;
            proxy_set_header Authorization '';

            # The next two lines could be used if your storage 
            # backend does not support Content-Disposition 
            # headers used to specify file name browsers use 
            # when save content to the disk
            # proxy_hide_header Content-Disposition;
            # add_header Content-Disposition 'attachment; filename="$args"';

            # Do not touch local disks when proxying 
            # content to clients
            proxy_max_temp_file_size 0;


            # If we are redirecting externally, return the redirect response
            # back to the client.
            set $redirect_externally EOS_NGINX_REDIRECT_EXTERNALLY;
            if ($redirect_externally)
            {
                return 307 $download_url;
            }

            # Otherwise, download the file directly from the backend and stream
            # it to the client.
            proxy_pass $download_url;
        }
    }


    # Virtual host to redirect all plain HTTP requests to HTTPS ones
    server {
       server_name    EOS_NGINX_HOSTNAME;
       listen         80;
       rewrite        ^ https://$server_name$request_uri? permanent;
    }
}
