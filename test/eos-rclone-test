#!/bin/bash

# ----------------------------------------------------------------------
# File: eos-rclone-test
# Author: Andreas-Joachim Peters - CERN
# Description: Test script for EOS rclone functionality
# ----------------------------------------------------------------------

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to wait for background jobs
wait_for_jobs() {
    local max_jobs=$1
    while [ $(jobs -p | wc -l) -ge $max_jobs ]; do
        sleep 0.1
    done
}

# Test configuration
TEST_FILE=${TESTSYSFILE1K-"/etc/passwd"}
INITIAL_FILES=100
LOCAL_FILES=50
SYNC_TEST_FILES=25
MAX_PARALLEL_JOBS=20  # Maximum number of parallel copy jobs

# Function to print colored test status
print_status() {
    local test_name=$1
    local status=$2
    printf "${BLUE}[TEST]${NC} %s ... " "$test_name"
    if [ "$status" -eq 0 ]; then
        printf "${GREEN}PASSED${NC}\n"
    else
        printf "${RED}FAILED${NC}\n"
        exit $status
    fi
}

# Function to check file/directory counts
check_count() {
    local path=$1
    local type=$2  # 'f' for files, 'd' for directories, 'l' for links
    local expected=$3
    local actual
    
    if [ "$path" == "eos" ]; then
        actual=$(eos newfind -f /eos/$eosdir/cl/ | wc -l)
    else
        actual=$(find $localdir/cl/ -type $type | wc -l)
    fi
    
    if [ "$actual" -eq "$expected" ]; then
        return 0
    else
        echo -e "${RED}Expected $expected $type, found $actual${NC}"
        return 1
    fi
}

# Function to verify file exists
check_file_exists() {
    local path=$1
    local file=$2
    if [ "$path" == "eos" ]; then
        eos stat /eos/$eosdir/cl/$file >/dev/null 2>&1
    else
        test -f $localdir/cl/$file
    fi
    return $?
}

# Function to verify file does not exist
check_file_not_exists() {
    local path=$1
    local file=$2
    if [ "$path" == "eos" ]; then
        ! eos stat /eos/$eosdir/cl/$file >/dev/null 2>&1
    else
        ! test -f $localdir/cl/$file
    fi
    return $?
}

# Validate input arguments
if [ $# -ne 2 ]; then
    echo -e "${RED}Usage: $0 <local_directory> <eos_directory>${NC}"
    exit 1
fi

localdir=$1
eosdir=$2

echo -e "${YELLOW}EOS RClone Test Suite${NC}"
echo "Local directory: $localdir"
echo "EOS directory: $eosdir"
echo "----------------------------------------"

# Setup test environment
echo -e "${BLUE}[SETUP]${NC} Preparing test environment..."
eos mkdir -p /eos/$eosdir/cl/
eos chmod 777 /eos/$eosdir/cl/
eos rm -r /eos/$eosdir/cl/
eos mkdir -p /eos/$eosdir/cl/dir1/dir2/
test -d $localdir/cl/ && rm -rf $localdir/cl/
mkdir -p $localdir/cl/

# Test 1: Create and copy initial files
echo -e "\n${BLUE}[TEST 1]${NC} Creating and copying initial files..."
for name in $(seq 1 $INITIAL_FILES); do 
    wait_for_jobs $MAX_PARALLEL_JOBS
    eos cp $TEST_FILE /eos/$eosdir/cl/dir1/dir2/file.$name &
done
wait  # Wait for all background jobs to complete
eos cp $TEST_FILE /eos/$eosdir/cl/file.0

# Test dry run first
eos -b rclone copy /eos/$eosdir/cl/ $localdir/cl/ --dryrun
status=$?
print_status "Dry run copy" $status

# Actual copy
eos -b rclone copy /eos/$eosdir/cl/ $localdir/cl/
check_count "$localdir" "f" 101 && check_count "$localdir" "d" 3
print_status "Initial file copy" $?

# Test 2: Symlink handling
echo -e "\n${BLUE}[TEST 2]${NC} Testing symlink operations..."
eos file symlink /eos/$eosdir/cl/link.0 file.0 
eos -b rclone copy /eos/$eosdir/cl/ $localdir/cl/
check_count "$localdir" "l" 1
print_status "Symlink copy" $?

# Test 3: Symlink sync
echo -e "\n${BLUE}[TEST 3]${NC} Testing symlink synchronization..."
eos rm /eos/$eosdir/cl/link.0
eos -b rclone sync /eos/$eosdir/cl/ $localdir/cl/ --verbose
eos stat /eos/$eosdir/cl/link.0
print_status "Symlink sync" $?

# Test 4: Local to EOS sync
echo -e "\n${BLUE}[TEST 4]${NC} Testing local to EOS sync..."
mkdir -p $localdir/cl/subtree/
for name in $(seq 1 $LOCAL_FILES); do 
    wait_for_jobs $MAX_PARALLEL_JOBS
    cp $TEST_FILE $localdir/cl/subtree/f.$name &
done
wait  # Wait for all background jobs to complete

eos -b rclone sync /eos/$eosdir/cl/ $localdir/cl/ --verbose
check_count "eos" "f" 152
print_status "Local to EOS sync" $?

# Test 5: Delete propagation
echo -e "\n${BLUE}[TEST 5]${NC} Testing delete propagation..."
eos rm /eos/$eosdir/cl/file.0
eos -b rclone copy /eos/$eosdir/cl/ $localdir/cl/ --verbose --delete
check_count "$localdir" "f" 150
print_status "Delete propagation" $?

# Test 6: Bidirectional sync with new files
echo -e "\n${BLUE}[TEST 6]${NC} Testing bidirectional sync with new files..."

# Create new files in EOS
echo -e "${BLUE}[TEST 6.1]${NC} Creating new files in EOS..."
for name in $(seq 1 $SYNC_TEST_FILES); do 
    wait_for_jobs $MAX_PARALLEL_JOBS
    eos cp $TEST_FILE /eos/$eosdir/cl/eos_new.$name &
done
wait  # Wait for all background jobs to complete

# Create different new files locally
echo -e "${BLUE}[TEST 6.2]${NC} Creating new files locally..."
for name in $(seq 1 $SYNC_TEST_FILES); do 
    wait_for_jobs $MAX_PARALLEL_JOBS
    cp $TEST_FILE $localdir/cl/local_new.$name &
done
wait  # Wait for all background jobs to complete

# Sync both ways
echo -e "${BLUE}[TEST 6.3]${NC} Syncing both directions..."
eos -b rclone sync /eos/$eosdir/cl/ $localdir/cl/ --verbose

# Verify files exist in both places
for name in $(seq 1 $SYNC_TEST_FILES); do
    check_file_exists "local" "eos_new.$name" && \
    check_file_exists "eos" "local_new.$name"
done
print_status "Bidirectional sync" $?

# Test 7: Delete propagation with sync
echo -e "\n${BLUE}[TEST 7]${NC} Testing delete propagation with sync..."


# Delete different files locally
echo -e "${BLUE}[TEST 7.2]${NC} Deleting files locally..."
for name in $(seq 11 20); do
    rm $localdir/cl/local_new.$name
done

# Delete some files from EOS
echo -e "${BLUE}[TEST 7.1]${NC} Deleting files from EOS..."
for name in $(seq 1 10); do
    eos rm /eos/$eosdir/cl/eos_new.$name
done

# Sync with delete
echo -e "${BLUE}[TEST 7.3]${NC} Syncing with delete flag..."
eos -b rclone sync /eos/$eosdir/cl/ $localdir/cl/ --delete -v
# Verify deletions propagated correctly:
# - Files deleted in EOS should be deleted locally
# - Files deleted locally should still exist in EOS (no backward deletion)
status=0
echo -e "${BLUE}[TEST 7.4]${NC} Verifying one-way deletion propagation..."
# Check EOS deletions propagated to local
for name in $(seq 1 10); do
    if ! check_file_not_exists "local" "eos_new.$name"; then
        echo -e "${RED}Failed: eos_new.$name still exists locally but was deleted in EOS${NC}"
        status=1
    fi
    if ! check_file_not_exists "eos" "eos_new.$name"; then
        echo -e "${RED}Failed: eos_new.$name still exists in EOS after deletion${NC}"
        status=1
    fi
done
# Check local deletions did not propagate to EOS
for name in $(seq 11 20); do
    if ! check_file_exists "local" "local_new.$name"; then
        echo -e "${RED}Failed: local_new.$name does not exist locally but should${NC}"
        status=1
    fi
    if ! check_file_exists "eos" "local_new.$name"; then
        echo -e "${RED}Failed: local_new.$name does not exist in EOS but should${NC}"
        status=1
    fi
done
print_status "One-way delete propagation" $status

# Update final verification count to account for one-way deletion
echo -e "\n${BLUE}[FINAL]${NC} Verifying final state..."
# Initial calculation:
# - Started with 150 files
# - Added SYNC_TEST_FILES (25) new files in EOS (eos_new.*)
# - Added SYNC_TEST_FILES (25) new files locally (local_new.*)
# - Deleted 10 files from EOS (eos_new.1-10) which propagates to local
# - Deleted 10 files locally (local_new.11-20) which does NOT propagate to EOS, they are synched back from EOS
local_expected_files=$((150 + 2*SYNC_TEST_FILES - 10))  # Local sees all files minus EOS deletions
eos_expected_files=$((151 + 2*SYNC_TEST_FILES - 10))    # EOS keeps all files (no deletions propagated to EOS) and also reports the symbolic link as a file counted
echo -e "${BLUE}[FINAL]${NC} Expecting $local_expected_files files locally and $eos_expected_files files in EOS"
check_count "local" "f" $local_expected_files && \
check_count "eos" "f" $eos_expected_files
print_status "Final state verification" $?

echo -e "\n${GREEN}âœ“ All tests passed successfully!${NC}"
