#!/bin/bash

#------------------------------------------------------------------------------
# File: eos-altxs-test
# Author: Gianmaria Del Monte - CERN
#------------------------------------------------------------------------------

#/************************************************************************
# * EOS - the CERN Disk Storage System                                   *
# * Copyright (C) 2025 CERN/Switzerland                                  *
# *                                                                      *
# * This program is free software: you can redistribute it and/or modify *
# * it under the terms of the GNU General Public License as published by *
# * the Free Software Foundation, either version 3 of the License, or    *
# * (at your option) any later version.                                  *
# *                                                                      *
# * This program is distributed in the hope that it will be useful,      *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
# * GNU General Public License for more details.                         *
# *                                                                      *
# * You should have received a copy of the GNU General Public License    *
# * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
# ************************************************************************/

set -x

SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
source ${SCRIPTPATH}/eos-test-utils

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <eos_mgm_hostname>"
  exit 1
fi

function compute_xs() {
  local type=$1
  local file=$2

  case $type in
    md5)
      md5sum "${file}" | awk '{print $1}'
      ;;

    sha)
      sha1sum "${file}" | awk '{print $1}'
      ;;

    sha256)
      sha256sum "${file}" | awk '{print $1}'
      ;;

    adler)
      eos-adler32 "${file}" | awk -F'adler32=' '{print $2}'
      ;;

    *)
      echo "Checksum type not recognised"
      exit 1
      ;;
  esac
}

function check_checksums() {
  local eos_file=$1
  local local_file=$2
  local checksums=($3)

  altchecksums=$(eos -j root://$EOS_MGM_HOSTNAME file info "$eos_file" | jq '.altchecksums')
  if [[ $(jq 'length' <<< $altchecksums) -ne "${#checksums[@]}" ]]; then
    return 1    
  fi

  for xs in "${checksums[@]}"; do
    stored=$(jq -r ".[] | select(.type==\"${xs}\") | .value" <<< $altchecksums)
    if [ -z "${stored}" ]; then
      echo "$xs checksum expected to be stored, but not found"
      return 1
    fi

    computed=$(compute_xs $xs "${local_file}")
    if [[ "${stored}" != "${computed}" ]]; then
      echo "$xs checksums differ: stored=\"$stored\" computed=\"$computed\""
      return 1
    fi
  done

  return 0
}

function enable_altxs_scan() {
  local time=$1
  for fsid in $(eos -j fs ls | jq '.result[].id'); do
    eos fs config ${fsid} scan_alt_xs_interval=${time}
  done
}

function disable_altxs_scan() {
  enable_altxs_scan 0
}

function enable_altxs_upload() {
  for space in $(eos -j space ls | jq -r '.result[].name'); do
    eos space config $space space.altxs=on
  done
}

function disable_altxs_upload() {
  for space in $(eos -j space ls | jq -r '.result[].name'); do
    eos space config $space space.altxs=off
  done
}

EOS_MGM_HOSTNAME=$1
EOS_ALTXS_TEST=/eos/dockertest/altxs_test

# Create dummy test files
TEST_FILE=/var/tmp/file_altxs.dat
TEST_FILE2=/var/tmp/file_altxs.dat

dd if=/dev/urandom of=${TEST_FILE} bs=1M count=16 &> /dev/null
dd if=/dev/urandom of=${TEST_FILE2} bs=1M count=64 &> /dev/null

# Test 1
# Disable ScanDir thread for computing alternative checksums and
# enable on the EOS directory the alternative checksums and check
# if they were computed
disable_altxs_scan
eos mkdir -p ${EOS_ALTXS_TEST}/enabled
eos attr set sys.altchecksums="md5,sha1" ${EOS_ALTXS_TEST}/enabled
enable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/enabled/altxs.dat
sleep 5 # Wait the FST to commit the alt checksums
fail_on_error check_checksums "${EOS_ALTXS_TEST}/enabled/altxs.dat" "${TEST_FILE}" "md5 sha"

# Test 2
# Enable alternative checksums after having uplaoded the file
eos mkdir -p ${EOS_ALTXS_TEST}/disabled
eos attr rm sys.altchecksums ${EOS_ALTXS_TEST}/disabled || true
enable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/disabled/altxs.dat
eos attr set sys.altchecksums="md5,sha1,sha256" ${EOS_ALTXS_TEST}/disabled
enable_altxs_scan 5
check_until_no_errors "check_checksums \"${EOS_ALTXS_TEST}/disabled/altxs.dat\" \"${TEST_FILE}\" \"md5 sha sha256\"" 300

# Test 3
# Check if updating the file, the alternative checksums are updated accordingly
disable_altxs_scan
eos mkdir -p ${EOS_ALTXS_TEST}/updated
eos attr set sys.altchecksums="sha1,sha256" ${EOS_ALTXS_TEST}/updated
enable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/updated/altxs.dat
xrdcp -f --nopbar ${TEST_FILE2} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/updated/altxs.dat
fail_on_error check_checksums "${EOS_ALTXS_TEST}/updated/altxs.dat" "${TEST_FILE2}" "sha sha256"

# Test 4
# Check that triggering the verify command, the alternative checksums are computed and committed
disable_altxs_scan
eos mkdir -p ${EOS_ALTXS_TEST}/triggered
eos attr rm sys.altchecksums ${EOS_ALTXS_TEST}/triggered || true
enable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/triggered/altxs.dat
eos attr set sys.altchecksums="md5,sha1,sha256" ${EOS_ALTXS_TEST}/triggered
eos file verify ${EOS_ALTXS_TEST}/triggered/altxs.dat -checksum -commitchecksum
check_until_no_errors "check_checksums \"${EOS_ALTXS_TEST}/triggered/altxs.dat\" \"${TEST_FILE}\" \"md5 sha sha256\"" 300

# Test 5
# Check that if there are already alternative checksums, adding others will compute the new ones
disable_altxs_scan
eos mkdir -p ${EOS_ALTXS_TEST}/added
eos attr set sys.altchecksums="md5" ${EOS_ALTXS_TEST}/added
enable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/added/altxs.dat
eos attr set sys.altchecksums="md5,sha1,sha256" ${EOS_ALTXS_TEST}/added
enable_altxs_scan 5
check_until_no_errors "check_checksums \"${EOS_ALTXS_TEST}/added/altxs.dat\" \"${TEST_FILE}\" \"md5 sha sha256\"" 300

# Test 6
# Check that removing alternative checksums, the removal is reflected on namespace
disable_altxs_scan
eos mkdir -p ${EOS_ALTXS_TEST}/removed
eos attr set sys.altchecksums="md5,sha1" ${EOS_ALTXS_TEST}/removed
enable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/removed/altxs.dat
eos attr -r set sys.altchecksums="sha1" ${EOS_ALTXS_TEST}/removed
enable_altxs_scan 5
check_until_no_errors "check_checksums \"${EOS_ALTXS_TEST}/removed/altxs.dat\" \"${TEST_FILE}\" \"sha\"" 300

## Test 7
# Check that disabling the computation of the alternative checksums on file upload, this doesn't get computed
disable_altxs_scan
eos mkdir -p ${EOS_ALTXS_TEST}/disabled_on_upload
eos attr set sys.altchecksums="md5" ${EOS_ALTXS_TEST}/disabled_on_upload
disable_altxs_upload
xrdcp -f --nopbar ${TEST_FILE} root://${EOS_MGM_HOSTNAME}/${EOS_ALTXS_TEST}/disabled_on_upload/altxs.dat
fail_on_error check_checksums "${EOS_ALTXS_TEST}/disabled_on_upload/altxs.dat" "${TEST_FILE}" ""