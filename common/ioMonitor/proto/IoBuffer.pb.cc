// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IoBuffer.proto

#include "IoBuffer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace IoBuffer {
template <typename>
PROTOBUF_CONSTEXPR Summary::Summary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ravrg_)*/ 0u

  , /*decltype(_impl_.rstd_)*/ 0u

  , /*decltype(_impl_.wavrg_)*/ 0u

  , /*decltype(_impl_.wstd_)*/ 0u

  , /*decltype(_impl_.rsize_)*/ 0u

  , /*decltype(_impl_.wsize_)*/ 0u

  , /*decltype(_impl_.riops_)*/ 0

  , /*decltype(_impl_.wiops_)*/ 0

  , /*decltype(_impl_.wintime_)*/ ::uint64_t{0u}
} {}
struct SummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDefaultTypeInternal() {}
  union {
    Summary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDefaultTypeInternal _Summary_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR data_AppsEntry_DoNotUse::data_AppsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct data_AppsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR data_AppsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~data_AppsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    data_AppsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 data_AppsEntry_DoNotUseDefaultTypeInternal _data_AppsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR data_UidsEntry_DoNotUse::data_UidsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct data_UidsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR data_UidsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~data_UidsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    data_UidsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 data_UidsEntry_DoNotUseDefaultTypeInternal _data_UidsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR data_GidsEntry_DoNotUse::data_GidsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct data_GidsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR data_GidsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~data_GidsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    data_GidsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 data_GidsEntry_DoNotUseDefaultTypeInternal _data_GidsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR data::data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apps_)*/{}
  , /*decltype(_impl_.uids_)*/{}
  , /*decltype(_impl_.gids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~dataDefaultTypeInternal() {}
  union {
    data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dataDefaultTypeInternal _data_default_instance_;
}  // namespace IoBuffer
static ::_pb::Metadata file_level_metadata_IoBuffer_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_IoBuffer_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_IoBuffer_2eproto = nullptr;
const ::uint32_t TableStruct_IoBuffer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.ravrg_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.rstd_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.wavrg_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.wstd_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.rsize_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.wsize_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.riops_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.wiops_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::Summary, _impl_.wintime_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    4,
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_AppsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_AppsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_AppsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_AppsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_UidsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_UidsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_UidsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_UidsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_GidsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_GidsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_GidsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data_GidsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data, _impl_.apps_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data, _impl_.uids_),
    PROTOBUF_FIELD_OFFSET(::IoBuffer::data, _impl_.gids_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::IoBuffer::Summary)},
        { 26, 36, -1, sizeof(::IoBuffer::data_AppsEntry_DoNotUse)},
        { 38, 48, -1, sizeof(::IoBuffer::data_UidsEntry_DoNotUse)},
        { 50, 60, -1, sizeof(::IoBuffer::data_GidsEntry_DoNotUse)},
        { 62, -1, -1, sizeof(::IoBuffer::data)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::IoBuffer::_Summary_default_instance_._instance,
    &::IoBuffer::_data_AppsEntry_DoNotUse_default_instance_._instance,
    &::IoBuffer::_data_UidsEntry_DoNotUse_default_instance_._instance,
    &::IoBuffer::_data_GidsEntry_DoNotUse_default_instance_._instance,
    &::IoBuffer::_data_default_instance_._instance,
};
const char descriptor_table_protodef_IoBuffer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016IoBuffer.proto\022\010IoBuffer\"\333\001\n\007Summary\022\022"
    "\n\005rAvrg\030\001 \001(\rH\000\210\001\001\022\021\n\004rStd\030\002 \001(\rH\001\210\001\001\022\022\n"
    "\005wAvrg\030\003 \001(\rH\002\210\001\001\022\021\n\004wStd\030\004 \001(\rH\003\210\001\001\022\r\n\005"
    "rSize\030\005 \001(\r\022\r\n\005wSize\030\006 \001(\r\022\r\n\005rIops\030\007 \001("
    "\001\022\r\n\005wIops\030\010 \001(\001\022\024\n\007winTime\030\t \001(\004H\004\210\001\001B\010"
    "\n\006_rAvrgB\007\n\005_rStdB\010\n\006_wAvrgB\007\n\005_wStdB\n\n\010"
    "_winTime\"\276\002\n\004data\022&\n\004apps\030\001 \003(\0132\030.IoBuff"
    "er.data.AppsEntry\022&\n\004uids\030\002 \003(\0132\030.IoBuff"
    "er.data.UidsEntry\022&\n\004gids\030\003 \003(\0132\030.IoBuff"
    "er.data.GidsEntry\032>\n\tAppsEntry\022\013\n\003key\030\001 "
    "\001(\t\022 \n\005value\030\002 \001(\0132\021.IoBuffer.Summary:\0028"
    "\001\032>\n\tUidsEntry\022\013\n\003key\030\001 \001(\004\022 \n\005value\030\002 \001"
    "(\0132\021.IoBuffer.Summary:\0028\001\032>\n\tGidsEntry\022\013"
    "\n\003key\030\001 \001(\004\022 \n\005value\030\002 \001(\0132\021.IoBuffer.Su"
    "mmary:\0028\001b\006proto3"
};
static ::absl::once_flag descriptor_table_IoBuffer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_IoBuffer_2eproto = {
    false,
    false,
    577,
    descriptor_table_protodef_IoBuffer_2eproto,
    "IoBuffer.proto",
    &descriptor_table_IoBuffer_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_IoBuffer_2eproto::offsets,
    file_level_metadata_IoBuffer_2eproto,
    file_level_enum_descriptors_IoBuffer_2eproto,
    file_level_service_descriptors_IoBuffer_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_IoBuffer_2eproto_getter() {
  return &descriptor_table_IoBuffer_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_IoBuffer_2eproto(&descriptor_table_IoBuffer_2eproto);
namespace IoBuffer {
// ===================================================================

class Summary::_Internal {
 public:
  using HasBits = decltype(std::declval<Summary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Summary, _impl_._has_bits_);
  static void set_has_ravrg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rstd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wavrg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wstd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wintime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:IoBuffer.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IoBuffer.Summary)
}

inline void Summary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ravrg_) { 0u }

    , decltype(_impl_.rstd_) { 0u }

    , decltype(_impl_.wavrg_) { 0u }

    , decltype(_impl_.wstd_) { 0u }

    , decltype(_impl_.rsize_) { 0u }

    , decltype(_impl_.wsize_) { 0u }

    , decltype(_impl_.riops_) { 0 }

    , decltype(_impl_.wiops_) { 0 }

    , decltype(_impl_.wintime_) { ::uint64_t{0u} }

  };
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:IoBuffer.Summary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Summary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Summary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:IoBuffer.Summary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.ravrg_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.wstd_) -
        reinterpret_cast<char*>(&_impl_.ravrg_)) + sizeof(_impl_.wstd_));
  }
  ::memset(&_impl_.rsize_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.wiops_) -
      reinterpret_cast<char*>(&_impl_.rsize_)) + sizeof(_impl_.wiops_));
  _impl_.wintime_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rAvrg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ravrg(&has_bits);
          _impl_.ravrg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 rStd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_rstd(&has_bits);
          _impl_.rstd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 wAvrg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_wavrg(&has_bits);
          _impl_.wavrg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 wStd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_wstd(&has_bits);
          _impl_.wstd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 rSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.rsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 wSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.wsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double rIops = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _impl_.riops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double wIops = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _impl_.wiops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 winTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_wintime(&has_bits);
          _impl_.wintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Summary::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IoBuffer.Summary)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rAvrg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_ravrg(), target);
  }

  // optional uint32 rStd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_rstd(), target);
  }

  // optional uint32 wAvrg = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_wavrg(), target);
  }

  // optional uint32 wStd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_wstd(), target);
  }

  // uint32 rSize = 5;
  if (this->_internal_rsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_rsize(), target);
  }

  // uint32 wSize = 6;
  if (this->_internal_wsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_wsize(), target);
  }

  // double rIops = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_riops = this->_internal_riops();
  ::uint64_t raw_riops;
  memcpy(&raw_riops, &tmp_riops, sizeof(tmp_riops));
  if (raw_riops != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_riops(), target);
  }

  // double wIops = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_wiops = this->_internal_wiops();
  ::uint64_t raw_wiops;
  memcpy(&raw_wiops, &tmp_wiops, sizeof(tmp_wiops));
  if (raw_wiops != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_wiops(), target);
  }

  // optional uint64 winTime = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_wintime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IoBuffer.Summary)
  return target;
}

::size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IoBuffer.Summary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 rAvrg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ravrg());
    }

    // optional uint32 rStd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rstd());
    }

    // optional uint32 wAvrg = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_wavrg());
    }

    // optional uint32 wStd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_wstd());
    }

  }
  // uint32 rSize = 5;
  if (this->_internal_rsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_rsize());
  }

  // uint32 wSize = 6;
  if (this->_internal_wsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_wsize());
  }

  // double rIops = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_riops = this->_internal_riops();
  ::uint64_t raw_riops;
  memcpy(&raw_riops, &tmp_riops, sizeof(tmp_riops));
  if (raw_riops != 0) {
    total_size += 9;
  }

  // double wIops = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_wiops = this->_internal_wiops();
  ::uint64_t raw_wiops;
  memcpy(&raw_wiops, &tmp_wiops, sizeof(tmp_wiops));
  if (raw_wiops != 0) {
    total_size += 9;
  }

  // optional uint64 winTime = 9;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_wintime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Summary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary::GetClassData() const { return &_class_data_; }


void Summary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Summary*>(&to_msg);
  auto& from = static_cast<const Summary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IoBuffer.Summary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ravrg_ = from._impl_.ravrg_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rstd_ = from._impl_.rstd_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wavrg_ = from._impl_.wavrg_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.wstd_ = from._impl_.wstd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_rsize() != 0) {
    _this->_internal_set_rsize(from._internal_rsize());
  }
  if (from._internal_wsize() != 0) {
    _this->_internal_set_wsize(from._internal_wsize());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_riops = from._internal_riops();
  ::uint64_t raw_riops;
  memcpy(&raw_riops, &tmp_riops, sizeof(tmp_riops));
  if (raw_riops != 0) {
    _this->_internal_set_riops(from._internal_riops());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_wiops = from._internal_wiops();
  ::uint64_t raw_wiops;
  memcpy(&raw_wiops, &tmp_wiops, sizeof(tmp_wiops));
  if (raw_wiops != 0) {
    _this->_internal_set_wiops(from._internal_wiops());
  }
  if (cached_has_bits & 0x00000010u) {
    _this->_internal_set_wintime(from._internal_wintime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IoBuffer.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary, _impl_.wintime_)
      + sizeof(Summary::_impl_.wintime_)
      - PROTOBUF_FIELD_OFFSET(Summary, _impl_.ravrg_)>(
          reinterpret_cast<char*>(&_impl_.ravrg_),
          reinterpret_cast<char*>(&other->_impl_.ravrg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IoBuffer_2eproto_getter, &descriptor_table_IoBuffer_2eproto_once,
      file_level_metadata_IoBuffer_2eproto[0]);
}
// ===================================================================

data_AppsEntry_DoNotUse::data_AppsEntry_DoNotUse() {}
data_AppsEntry_DoNotUse::data_AppsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void data_AppsEntry_DoNotUse::MergeFrom(const data_AppsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata data_AppsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IoBuffer_2eproto_getter, &descriptor_table_IoBuffer_2eproto_once,
      file_level_metadata_IoBuffer_2eproto[1]);
}
// ===================================================================

data_UidsEntry_DoNotUse::data_UidsEntry_DoNotUse() {}
data_UidsEntry_DoNotUse::data_UidsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void data_UidsEntry_DoNotUse::MergeFrom(const data_UidsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata data_UidsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IoBuffer_2eproto_getter, &descriptor_table_IoBuffer_2eproto_once,
      file_level_metadata_IoBuffer_2eproto[2]);
}
// ===================================================================

data_GidsEntry_DoNotUse::data_GidsEntry_DoNotUse() {}
data_GidsEntry_DoNotUse::data_GidsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void data_GidsEntry_DoNotUse::MergeFrom(const data_GidsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata data_GidsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IoBuffer_2eproto_getter, &descriptor_table_IoBuffer_2eproto_once,
      file_level_metadata_IoBuffer_2eproto[3]);
}
// ===================================================================

class data::_Internal {
 public:
};

data::data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:IoBuffer.data)
}
data::data(const data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.apps_)*/{}
    , /*decltype(_impl_.uids_)*/{}
    , /*decltype(_impl_.gids_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.apps_.MergeFrom(from._impl_.apps_);
  _this->_impl_.uids_.MergeFrom(from._impl_.uids_);
  _this->_impl_.gids_.MergeFrom(from._impl_.gids_);
  // @@protoc_insertion_point(copy_constructor:IoBuffer.data)
}

inline void data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.apps_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.uids_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.gids_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

data::~data() {
  // @@protoc_insertion_point(destructor:IoBuffer.data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apps_.~MapField();
  _impl_.uids_.~MapField();
  _impl_.gids_.~MapField();
}

void data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void data::Clear() {
// @@protoc_insertion_point(message_clear_start:IoBuffer.data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apps_.Clear();
  _impl_.uids_.Clear();
  _impl_.gids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .IoBuffer.Summary> apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.apps_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint64, .IoBuffer.Summary> uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.uids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint64, .IoBuffer.Summary> gids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.gids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* data::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IoBuffer.data)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .IoBuffer.Summary> apps = 1;
  if (!this->_internal_apps().empty()) {
    using MapType = ::_pb::Map<std::string, ::IoBuffer::Summary>;
    using WireHelper = data_AppsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_apps();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "IoBuffer.data.apps");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint64, .IoBuffer.Summary> uids = 2;
  if (!this->_internal_uids().empty()) {
    using MapType = ::_pb::Map<::uint64_t, ::IoBuffer::Summary>;
    using WireHelper = data_UidsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_uids();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint64, .IoBuffer.Summary> gids = 3;
  if (!this->_internal_gids().empty()) {
    using MapType = ::_pb::Map<::uint64_t, ::IoBuffer::Summary>;
    using WireHelper = data_GidsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_gids();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IoBuffer.data)
  return target;
}

::size_t data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IoBuffer.data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .IoBuffer.Summary> apps = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_apps_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::IoBuffer::Summary >::const_iterator
      it = this->_internal_apps().begin();
      it != this->_internal_apps().end(); ++it) {
    total_size += data_AppsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .IoBuffer.Summary> uids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::IoBuffer::Summary >::const_iterator
      it = this->_internal_uids().begin();
      it != this->_internal_uids().end(); ++it) {
    total_size += data_UidsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .IoBuffer.Summary> gids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::IoBuffer::Summary >::const_iterator
      it = this->_internal_gids().begin();
      it != this->_internal_gids().end(); ++it) {
    total_size += data_GidsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*data::GetClassData() const { return &_class_data_; }


void data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<data*>(&to_msg);
  auto& from = static_cast<const data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IoBuffer.data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apps_.MergeFrom(from._impl_.apps_);
  _this->_impl_.uids_.MergeFrom(from._impl_.uids_);
  _this->_impl_.gids_.MergeFrom(from._impl_.gids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void data::CopyFrom(const data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IoBuffer.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data::IsInitialized() const {
  return true;
}

void data::InternalSwap(data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apps_.InternalSwap(&other->_impl_.apps_);
  _impl_.uids_.InternalSwap(&other->_impl_.uids_);
  _impl_.gids_.InternalSwap(&other->_impl_.gids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IoBuffer_2eproto_getter, &descriptor_table_IoBuffer_2eproto_once,
      file_level_metadata_IoBuffer_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IoBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IoBuffer::Summary*
Arena::CreateMaybeMessage< ::IoBuffer::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IoBuffer::Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::IoBuffer::data_AppsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::IoBuffer::data_AppsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IoBuffer::data_AppsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::IoBuffer::data_UidsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::IoBuffer::data_UidsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IoBuffer::data_UidsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::IoBuffer::data_GidsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::IoBuffer::data_GidsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IoBuffer::data_GidsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::IoBuffer::data*
Arena::CreateMaybeMessage< ::IoBuffer::data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IoBuffer::data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
