stages:
  - build:manual
  - prebuild
  - build:rpm
  - build:dockerimage
  - test
  - publish
  - clean

include:
  - template: Code-Quality.gitlab-ci.yml
  #  - local: /gitlab-ci/.gitlab-ci-test-dock_include.yml @note on the file
  - local: /gitlab-ci/.gitlab-ci-test-k8s_include.yml
  - local: /gitlab-ci/.gitlab-ci-test-helm_include.yml

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      variables:
        KOJI_SCRATCH: "--scratch"
    - if: $CI_COMMIT_TAG
      variables:
        KOJI_SCRATCH: ""

variables:
  CODENAME: "diopside"

default:
  before_script:
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"


#-------------------------------------------------------------------------------
# Prebuild
#-------------------------------------------------------------------------------

.prebuild-template: &prebuild-template_definition
  stage: prebuild
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - export DESTINATION="gitlab-registry.cern.ch/dss/eos/prebuild-${PREBUILD_NAME}-${CODENAME}"
    - export DOCKERFILE="$CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/prebuild-${PREBUILD_NAME}.Dockerfile"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    # no need yet for --build-arg PREBUILD_NAME="$PREBUILD_NAME" --build-arg CMAKE_OPTIONS="$CMAKE_OPTIONS" --build-arg CXXFLAGS="$CXXFLAGS"
    - /kaniko/executor --cache="false" --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR --build-arg=EOS_CODENAME="${CODENAME}"
  only:
    variables:
      - $PREBUILD_TRIGGER

prebuild-cc7:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7

prebuild-cs8:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cs8

prebuild-cs9:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cs9

prebuild-al8:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: al8

prebuild-al9:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: al9

.prebuild-cc7_clang:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"

.prebuild-cc7_xrd_testing:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_xrd_testing

.prebuild-cc7_coverage:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_coverage
  only:
    variables:
      - $COVERAGE_SCHEDULE

#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

build_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7-${CODENAME}
  script:
    - git submodule sync --recursive && git submodule update --init --recursive
    - mkdir build
    - cd build/
    - cmake3 ../ -DPACKAGEONLY=1
    - make srpm
    - cd ../
    - echo -e "[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n" >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts;
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir cc7_artifacts; cp -R build/SRPMS/ build/RPMS/ build/eos-*.tar.gz cc7_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - cc7_artifacts/

macosx_dmg:
  stage: build:rpm
  script:
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - version=`./genversion.sh`
    - ./utils/eos-osx-package.sh $version
    - ccache -s
    - mkdir osx_artifacts
    - cp build/*.dmg osx_artifacts
  artifacts:
    expire_in: 1 day
    paths:
      - osx_artifacts/
  tags:
    - macosx-shell
  when: manual

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/

# schedules ------------------------------

.build-template: &build-template_definition
  stage: build:rpm
  script:
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - ./misc/cmake/cmake-3.19.7-Linux-x86_64.sh --prefix=/usr/ --skip-license \
    - mkdir build
    - cd build/
    - cmake ../ -DPACKAGEONLY=1 ${CLIENT}
    - make srpm
    - cd ../
    - dnf builddep --nogpgcheck --allowerasing -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | (ts 2> dev/null || true; tee)
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg2 --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts; cp -R build/SRPMS/ build/RPMS ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/
  only:
    - tags
  allow_failure: true # @todo dont allow failure when/if we drop Centos8 and switch to Stream

build_al8:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-al8-${CODENAME}
  <<: *build-template_definition
  only:
    - schedules
    - tags
  variables:
    BUILD_NAME: al8

build_al9:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-al9-${CODENAME}
  <<: *build-template_definition
  only:
    - schedules
    - tags
  variables:
    BUILD_NAME: al9

# Client Only builds:
build_cs8:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cs8-${CODENAME}
  <<: *build-template_definition
  variables:
    BUILD_NAME: cs8
    CLIENT: "-DCLIENT=1"

build_cs9:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cs9-${CODENAME}
  <<: *build-template_definition
  variables:
    BUILD_NAME: cs9
    CLIENT: "-DCLIENT=1"

####################### Build SRPM for RHEL #######################
.build-client-srpm-template: &build-client-srpm-template_definition
  stage: build:rpm
  before_script:
    - dnf config-manager --add-repo https://linuxsoft.cern.ch/cern/rhel/$(rpm --eval '%{rhel}')/CERN/$(uname -i)/ --set-enabled
    - dnf install cern-gpg-keys --nogpgcheck -y
    - rpm --import /etc/pki/rpm-gpg/*
    - dnf install rpm-build cmake gcc-c++ git -y
  script:
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - cd quarkdb/deps/mkdocs-material; git remote set-url origin https://gitlab.cern.ch/eos/mkdocs-material; git pull origin master; git checkout master; git pull; cd ../../..
    - EOS_VERSION="$(./genversion.sh)"; echo "${EOS_VERSION}"
    - mkdir -pv build/
    - cd build/
    - cmake ../ -DPACKAGEONLY=1 -DCLIENT=1
    - make srpm
    - cd ../
    - mkdir -p ${CI_JOB_NAME}_artifacts
    - cp -rv build/SRPMS/ ${CI_JOB_NAME}_artifacts
  artifacts:
    expire_in: 1 day
    paths:
      - ${CI_JOB_NAME}_artifacts
  only:
    - schedules
    - tags
  tags:
    - docker_node

rh-8:
 image: gitlab-registry.cern.ch/linuxsupport/ubi8/ubi
 extends: .build-client-srpm-template
 
rh-9:
 image: gitlab-registry.cern.ch/linuxsupport/ubi9/ubi
 extends: .build-client-srpm-template

###################### Build Ubuntu ######################
.build_ubuntu-template: &build_ubuntu-template_definition
  stage: build:rpm
  before_script:
    - apt-get update -y
    - apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
    - apt-add-repository 'deb https://apt.kitware.com/ubuntu/ '${EOS_DIST}' main'
  script:
    - apt-get update -y
    - apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache gawk
    # @todo re-enable building against latest XRootD master commit when CMake allows using XRootD plugin version 5 libraries
    #- echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_DIST}' master' >> /etc/apt/sources.list
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_DIST}' release' >> /etc/apt/sources.list
    - wget -O - http://storage-ci.web.cern.ch/storage-ci/storageci.key 2>/dev/null | apt-key add -
    - apt-get update -y
    - git submodule sync --recursive && git submodule update --init -f --recursive
    # @todo once the XRootD deb repos are better structured we can point to a
    # particular stable branch. For the moment, we force install the version we want
    # Priority >= 1000 causes a version to be installed even if this constitutes a downgrade of the package
    - export XROOTD_VERSION=$(grep "define xrootd_version_min" eos.spec.in | awk -F ':' '{print $2;}')
    - echo -e "Package:"" xrootd* libxrd* libxrootd*\nPin:"" version $XROOTD_VERSION\nPin-Priority:"" 1000" > /etc/apt/preferences.d/xrootd.pref
    - sed -e "s/_XRD_DEB_VER_/$XROOTD_VERSION/g" debian/control.template > debian/control
    - mk-build-deps --build-dep debian/control
    - gdebi -n eos-build-deps-depends*.deb
    - EOS_VERSION="$(./genversion.sh)"; echo "${EOS_VERSION}"
    - dch --create -v "${EOS_VERSION}" --package eos --urgency low --distribution ${EOS_DIST} -M "This package is built and released automatically. For important notices and releases subscribe to our mailing lists or visit our website."
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_deb.sh; fi
    - if [[ "$EOS_DIST" == "jammy" ]]; then
        dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages" --buildinfo-file="deb_packages/eos_${EOS_VERSION}_$(dpkg-architecture -qDEB_BUILD_ARCH).buildinfo" --changes-file="deb_packages/eos_${EOS_VERSION}_$(dpkg-architecture -qDEB_BUILD_ARCH).changes";
      else
        dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages";
      fi
    - ccache -s
    - mkdir ${EOS_DIST}_artifacts/; cp deb_packages/*.deb ${EOS_DIST}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_DIST}_artifacts/
  variables:
    CODENAME: ${CODENAME}
  dependencies: []
  allow_failure: true # @todo false for tags

build_ubuntu_jammy:
  image: ubuntu:jammy
  <<: *build_ubuntu-template_definition
  variables:
    EOS_DIST: jammy
  only:
    - schedules
    - tags

build_ubuntu_focal:
  image: ubuntu:focal
  <<: *build_ubuntu-template_definition
  variables:
    EOS_DIST: focal
  only:
    - schedules
    - tags

.build_fedora-template: &build_fedora-template_definition
  stage: build:rpm
  script:
    - dnf install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar dnf-plugins-core ccache rpm-sign
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - mkdir build; cd build
    - cmake3 .. -DPACKAGEONLY=1 -DCLIENT=1; make srpm; cd ..
    - echo -e "[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/${EOS_DIST}/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n" >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck --allowerasing -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_fc.sh; fi
    - rpmbuild --rebuild --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg2 --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${EOS_DIST}_artifacts; cp -R build/SRPMS build/RPMS ${EOS_DIST}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_DIST}_artifacts/
  dependencies: []
  allow_failure: true

build_fedora_36:
  image: fedora:36
  <<: *build_fedora-template_definition
  variables:
    EOS_DIST: fc-36
  only:
    - tags

build_fedora_37:
  image: fedora:37
  <<: *build_fedora-template_definition
  variables:
    EOS_DIST: fc-37
  only:
    - schedules
    - tags

build_fedora_rawhide:
  image: registry.fedoraproject.org/fedora:rawhide
  <<: *build_fedora-template_definition
  variables:
    EOS_DIST: fc-rawhide
  only:
    - schedules
  when: manual

# @note Using "normal" cc7 image as it doesn't actually need an exotic one, yet
.build_cc7_exotic-template: &build_cc7_exotic-template_definition
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7-${CODENAME}
  script:
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - mkdir build
    - cd build/
    - cmake3 ../ -DPACKAGEONLY=1 ${CMAKE_OPTIONS}
    - make srpm
    - cd ../
    - >
      if [[ "$RPMBUILD_OPTIONS" == *asan* ]]; then
        echo -e "[eos-asan-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-7-asan/x86_64/\ngpgcheck=0\nenabled=1\npriority=10\n" > /etc/yum.repos.d/eos-depend.repo;
        yum remove -y eos-xrootd;
        yum install -y eos-xrootd;
      else
        echo -e "[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n" > /etc/yum.repos.d/eos-depend.repo;
      fi
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts; cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/
  dependencies: []
  allow_failure: true

build_cc7_asan:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_asan
    CMAKE_OPTIONS: "-DASAN=1"
    RPMBUILD_OPTIONS: "--with server --with asan"
    CXXFLAGS: "-Wno-parentheses"    # Avoid boost header compilation errors
  before_script:
    - yum install -y cmake3 centos-release-scl devtoolset-8
    - yum install -y devtoolset-8-libasan-devel # explicitly install libasan from devtoolset-8
    - source /opt/rh/devtoolset-8/enable && gcc --version
  when: manual
  allow_failure: true

build_client_cc7_tsan:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_tsan
    CMAKE_OPTIONS: "-DTSAN=1"
    RPMBUILD_OPTIONS: "--with tsan"
    CXXFLAGS: "-Wno-parentheses"
  before_script:
    - yum install -y cmake3 centos-release-scl devtoolset-8
    - yum install -y libtsan --disablerepo=* --enablerepo=centos-sclo-rh
    - yum install -y devtoolset-8-libtsan-devel
    - source /opt/rh/devtoolset-8/enable && gcc --version
    - echo -e "[eos-tsan-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-7-tsan/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n" > /etc/yum.repos.d/eos-tsan-depend.repo;
    - yum remove -y eos-xrootd;
    - yum install -y eos-xrootd;
  when: manual
  allow_failure: true

build_cc7_clang:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"
    RPMBUILD_OPTIONS: "--with clang"
  only:
    - schedules
    - triggers

.build_cc7_xrd_testing: # @todo Re-enable xrd_testing jobs once project ugprades to XRootD 5
  before_script:
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"
    - echo -e '[xrootd-testing]\nname=XRootD Testing repository\nbaseurl=http://xrootd.cern.ch/sw/repos/testing/slc/7/$basearch\ngpgcheck=0\nenabled=1\npriority=5\nprotect=0\n' >> /etc/yum.repos.d/xrootd-testing.repo
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_xrd_testing
  only:
    - schedules
  allow_failure: true

build_cc7_opt_xrootd: # @note please contact CTA team / jleduc if you want to change this job
  before_script:
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"
    - sed -i "s/pgm \/usr\/bin\/xrdcp/pgm \/bin\/true/g" misc/etc/xrd.cf.fst
  <<: *build_cc7_exotic-template_definition
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7-${CODENAME}
  variables:
    BUILD_NAME: cc7_opt_xrootd
    CMAKE_OPTIONS: "-DEOS_XROOTD=1"
    RPMBUILD_OPTIONS: "--with eos_xrootd_rh"
  allow_failure: true
  except:
    - tags
  when: manual


build_cc7_no_sse:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_no_sse
    CMAKE_OPTIONS: "-DNO_SSE=1"
    RPMBUILD_OPTIONS: "--with server --with no_sse"
  only:
    - tags
    - triggers
  when: manual

build_cc7_coverage:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_coverage
    RPMBUILD_OPTIONS: "--with coverage"
  only:
    variables:
      - $COVERAGE_SCHEDULE

#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

.build_dockerimage-template:
  stage: build:dockerimage
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # @note keep $CACHE orthogonal to $IMAGE_TAG, do not join the "if"s
    - if [[ -n "$CI_COMMIT_TAG" ]] || [[ "x$CI_PIPELINE_SOURCE" == "xschedule" ]];
      then CACHE="false";
      else CACHE="true";
      fi
    - if [[ -n "$CI_COMMIT_TAG" ]];
      then IMAGE_TAG="$BASETAG$CI_COMMIT_TAG";
      else IMAGE_TAG="$BASETAG$CI_COMMIT_SHORT_SHA";
      fi
    - IMAGE_REPO="gitlab-registry.cern.ch/dss/eos/eos-ci"
    - DESTINATION="${IMAGE_REPO}:${IMAGE_TAG}"
    - echo "CACHE=$CACHE - DESTINATION=$DESTINATION"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=$CACHE --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR --build-arg=EOS_CODENAME="${CODENAME}"
  retry: 1

cc7_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile
    BASETAG: ""
  needs:
    - job: clone_docker
    - job: build_cc7

ubuntu_focal_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_ubuntu_focal
    BASETAG: "ubuntu_focal_client_"
  needs:
    - job: clone_docker
    - job: build_ubuntu_focal
  only:
    - schedules
    - tags
  allow_failure: true

ubuntu_jammy_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_ubuntu_jammy
    BASETAG: "ubuntu_jammy_client_"
  needs:
    - job: clone_docker
    - job: build_ubuntu_jammy
  only:
    - schedules
    - tags
  allow_failure: true

# schedules ------------------------------

.cs8_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_cs8
    BASETAG: "cs8_"
  needs:
    - job: clone_docker
    - job: build_cs8
  only:
    - schedules
    - tags
  allow_failure: true

cc7_asan_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_asan
    BASETAG: "asan_"
  needs:
    - job: clone_docker
    - job: build_cc7_asan
  when: manual
  allow_failure: true


# @todo Re-enable xrd_testing jobs once project ugprades to XRootD 5
# xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
.cc7_xrd_testing_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_xrd_testing
    BASETAG: "xrd_testing_"
  needs:
    - job: clone_docker
    - job: build_cc7_xrd_testing
  only:
    - schedules
  allow_failure: true

.cc7_coverage_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_coverage
    BASETAG: "coverage_"
  needs:
    - job: clone_docker
    - job: build_cc7_coverage
  only:
    variables:
      - $COVERAGE_SCHEDULE
  allow_failure: true


#-------------------------------------------------------------------------------
# Code quality, from codeclimate plugins
#-------------------------------------------------------------------------------

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      allow_failure: true
  tags:
    - docker-privileged

code_quality_html:
  extends: code_quality
  variables:
    REPORT_FORMAT: html
  artifacts:
    paths: [gl-code-quality-report.html]

#-------------------------------------------------------------------------------
# Dock8rnetes testing framework (exec_cmd wraps both docker and k8s!)
#-------------------------------------------------------------------------------

.dock8s_before_script_template: &dock8s_before_script_template
  before_script:
    - case $CI_JOB_NAME in
      "k8s"*  )
        source ./gitlab-ci/before_script_k8s_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type k8s $K8S_NAMESPACE ;;
      "dock"* )
        source ./gitlab-ci/before_script_docker_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type docker; ;;
      esac

.dock8s_after_script_template: &dock8s_after_script_template
  after_script:
    - case $CI_JOB_NAME in
      "k8s"*  )
        source ./gitlab-ci/after_script_k8s_test.sh ;;
      "dock"* )
        source ./gitlab-ci/after_script_docker_test.sh ;;
      esac

.dock8s_system_test_template:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - date
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-mgm1 'eos-instance-test-ci'
    - date
    - exec_cmd eos-mgm1 'eos-unit-tests-with-instance -n root://localhost//eos/dockertest/'
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    - date
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_cnvrt_fsck_template:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-test-utils ./eos-test-utils
    # converter
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-convert-test ./eos-convert-test; chmod +x eos-convert-test
    - case $CI_JOB_NAME in
      "k8s"*  )
        ./eos-convert-test --type k8s $K8S_NAMESPACE ;;
      "dock"* )
        ./eos-convert-test --type docker ;;
      esac
    - rm -rf eos-convert-test
    # fsck
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-fsck-test ./eos-fsck-test; chmod +x eos-fsck-test
    - case $CI_JOB_NAME in
      "k8s"*  )
        ./eos-fsck-test --max-delay 600 --type k8s $K8S_NAMESPACE ;;
      "dock"* )
        ./eos-fsck-test --max-delay 600 --type docker ;;
      esac
    - rm -rf eos-convert-test
    - rm -rf eos-fsck-test
    - rm -rf eos-test-utils
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_rtb_clone_template:
  stage: test
  <<: *dock8s_before_script_template
  script:
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # download tests repo
    - exec_cmd eos-cli1 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'
    # ubuntu releases do not support 'clone' yet, skip its test
    - case $CI_JOB_NAME in
      "ub_focal"* | "ub_jammy"* ) ;;
      *                          ) exec_cmd eos-cli1 'cd /eosclient-tests; clone_tests/clone_test.sh prepare; rc=$?; exit $rc' ;;
      esac
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_fusex_test_template:
  stage: test
  <<: *dock8s_before_script_template
  script:
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # fusex functional bindings
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eosfunctionaltest/ && mount -t fuse eosxd -ofsname=eosdockertest /eosfunctionaltest/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && [[ ! -d /eosfunctionaltest/dockertest/ ]] ; do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    - exec_cmd eos-cli1 'su eos-user -c "mkdir -m 700 -p /eosfunctionaltest/dockertest/credentialtest/ && cd /eosfunctionaltest/dockertest/credentialtest/"'
    - exec_cmd eos-cli1 'su eos-user -c "eos-test-credential-bindings /eosfunctionaltest/dockertest/credentialtest/"'
    # fusex benchmark
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-cli1 'su eos-user -c "mkdir -p /eos1/dockertest/fusex_tests/ && cd /eos1/dockertest/fusex_tests/ && fusex-benchmark"'
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    # download tests repo
    - exec_cmd eos-cli1 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'

    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]];
    # then
    #   exec_cmd eos-mgm1 'eos vid add gateway "eos-cli1.eos-cli1.${K8S_NAMESPACE}.svc.cluster.local" unix';
    #   exec_cmd eos-cli1 'env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci';
    # fi
    # until then just run the "ci" tests
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n prepare; done'
    - exec_cmd eos-cli1 'su eos-user -c "python3 /eosclient-tests/run.py --workdir=\"/eos1/dockertest /eos2/dockertest\" ci"'
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n cleanup; done'

    # fusex test SAMBA gateways authentication settings
    # this will run on the client pod
    - exec_cmd eos-mgm1 'eos vid enable sss'
    - exec_cmd eos-mgm1 'eos vid enable unix'
    - CLI_POD_HOSTNAME="$(exec_cmd eos-cli1 'hostname -f')"
    - echo ${CLI_POD_HOSTNAME}
    - exec_cmd eos-mgm1 "eos vid add gateway ${CLI_POD_HOSTNAME} unix"
    - exec_cmd eos-cli1 'eos-fusex-functional-test --samba'
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_cbox_test_template:
  stage: test
  <<: *dock8s_before_script_template
  script:
    # enable converter and prepare eoshome folder, cernbox alike
    - exec_cmd eos-mgm1 'eos space config default space.converter=on'
    - exec_cmd eos-mgm1 './eos_create_userhome.sh eos-user'
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos/ && mount -t fuse eosxd -ofsname=eosdockertest /eos/"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # set krb5 ticket and download tests repo @note the 'export KRB5CCNAME to FILE: type' is a spooky trick, can be made nicer.
    - exec_cmd eos-cli1 'echo -e "export KRB5CCNAME=FILE:/tmp/krb5cc_$(id -u eos-user)" >> ~/.bashrc'
    - exec_cmd eos-cli1 'su eos-user -c "kinit eos-user@TEST.EOS -k -t /home/eos-user/eos-user.keytab"'
    - exec_cmd eos-cli1 'su eos-user -c "git clone https://gitlab.cern.ch/dss/eosclient-tests.git /eos/user/e/eos-user/eosclient-tests"'
    # launch the tests
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user ci-eosfuse_release"'
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user regression"'
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/
  retry: 1

.dock8s_flamegraph_test_template:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - date
    - exec_cmd eos-mgm1 '/usr/sbin/eos-make-flamegraph'
    - date
  <<: *dock8s_after_script_template
  artifacts:
    expire_in: 1 days
    paths:
      - eos-logs-${CI_JOB_ID}/


.unit_test_template: &unit_test_template_definition
  stage: test
  script:
    # generic unit tests
    - eos-unit-tests
    - eos-unit-tests-fst
    - eos-fusex-tests
    - pip3 install pytest; python3 -m pytest /usr/sbin/test-eos-iam-mapfile.py
    # namespace specific unit tests
    - export EOS_QUARKDB_HOSTPORT=localhost:7777
    - quarkdb-create --path /var/quarkdb/node-0
    - chown -R daemon:daemon /var/quarkdb/node-0
    - xrootd -n qdb -c /etc/xrd.cf.quarkdb -l /var/log/eos/xrdlog.qdb -b -Rdaemon
    - eos-ns-quarkdb-tests
  needs:
    - job: cc7_docker_image
      artifacts: false
  retry: 1
  tags:
     - docker_node
     - dock

unit_test:tag:
  image:
    name: gitlab-registry.cern.ch/dss/eos/eos-ci:${CI_COMMIT_TAG}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  only:
    - tags

unit_test:
  image:
    name: gitlab-registry.cern.ch/dss/eos/eos-ci:${CI_COMMIT_SHORT_SHA}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  except:
    - tags

# @note.1 jobs with `needs: on manual jobs get stuck (no fail nor succeed)
# if an `optional: true` policy is not defined in GitLab < 13.12
# Drop as we upgrade, ref: https://about.gitlab.com/blog/2021/05/20/dag-manual-fix/
unit_test_asan:
  image:
    name: gitlab-registry.cern.ch/dss/eos/eos-ci:asan_${CI_COMMIT_SHORT_SHA}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  variables:
    LSAN_OPTIONS: "suppressions=/var/eos/test/LeakSanitizer.supp"  # Suppress known memory leaks. For the generic tests
    ASAN_OPTIONS: "fast_unwind_on_malloc=0"  # Avoid indirect leaks from linked dependencies. For the namespace tests
  needs:
    - job: cc7_asan_docker_image
      optional: true
      artifacts: false
  when: manual
  allow_failure: true


#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------

.publish_koji_template: &publish_koji_template_definition
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/rpmci/kojicli
  script:
    - yum install --nogpg -y sssd-client
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build ${KOJI_SCRATCH} ${TARGET} ${BUILD_NAME}_artifacts/SRPMS/*.src.rpm
# KOJI_SCRATCH will be set for branches and empty for tags
  only:
    - tags
    - rhel
    - alma
    - centos
  tags:
    - docker_node
    - publish

publish_koji_al8:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos8al"
    BUILD_NAME: "al8"
  dependencies:
    - build_al8

publish_koji_al9:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos9al"
    BUILD_NAME: "al9"
  dependencies:
    - build_al9

publish_koji_cs9:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos9"
    BUILD_NAME: "cs9"
  dependencies:
    - build_cs9

publish_koji_cs8:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos8s"
    BUILD_NAME: "cs8"
  dependencies:
    - build_cs8

publish_koji_cc7:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos7"
    BUILD_NAME: "cc7"
  dependencies:
    - build_cc7

####### Publish RHEL from SRPMs #######
publish_koji_rh-8:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos8el"
    BUILD_NAME: "rh-8"
  needs:
    - job: rh-8

publish_koji_rh-9:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos9el"
    BUILD_NAME: "rh-9"
  needs:
    - job: rh-9

rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${CODENAME} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  except:
    - tags
  allow_failure: true
  when: manual

rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${CODENAME} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  only:
    - master
    - eos5
    - tags
  retry: 1

rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${CODENAME} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${CODENAME} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${CODENAME}/tag/latest_version
  tags:
    - docker_node
    - publish
  only:
    - tags
  dependencies: []
  when: manual

rpm_no_sse_tag_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh "${CODENAME}-no_sse" "tag" /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  only:
    - tags
  allow_failure: true
  dependencies:
    - build_cc7_no_sse
  when: manual

# @todo rework on the entanglement between the sign, the publish and the removal of the old artifacts
debian_focal_artifacts:
  stage: publish
  image: ubuntu:focal
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H -E ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${CODENAME} ${BUILD_TYPE}
  dependencies:
    - build_ubuntu_focal
  only:
    - tags
  retry: 2
  tags:
    - docker_node
    - publish
  allow_failure: true

debian_jammy_artifacts:
  stage: publish
  image: ubuntu:jammy
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H -E ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${CODENAME} ${BUILD_TYPE}
  dependencies:
    - build_ubuntu_jammy
  only:
    - tags
  retry: 2
  tags:
    - docker_node
    - publish
  allow_failure: true

debian_artifacts_volume:
  stage: publish
  image: ubuntu:focal
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - ./gitlab-ci/store_artifacts_debian.sh /mnt/eos_repositories/debian/eos/${CODENAME} tag
  dependencies:
    - build_ubuntu_focal
    - build_ubuntu_jammy
  only:
    - tags
  tags:
    - docker_node
    - publish

#to be run after the rpm publish
.publish_dockerimage-template:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -n "$CI_COMMIT_TAG" ]]; then
        export REPOBRANCH="tag-testing";
        export DESTINATION="${IMAGE_REPO}:${CI_COMMIT_TAG}";
      else
        export REPOBRANCH="commit";
        export DESTINATION="${IMAGE_REPO}:${CI_COMMIT_SHORT_SHA}";
      fi
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=false --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR --build-arg=EOS_CODENAME="${CODENAME}" --build-arg=REPOBRANCH="${REPOBRANCH}"
  retry: 1

c7_publish_dockerimage_all:
  extends: .publish_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/minimal/c7_minimal.Dockerfile
    IMAGE_REPO: "gitlab-registry.cern.ch/dss/eos/eos-all"
  needs:
    - job: clone_docker
    - job: build_cc7
  allow_failure: true
  when: manual

c7_publish_dockerimage_fusex:
  extends: .publish_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/minimal/c7_minimal.fusex-only.Dockerfile
    IMAGE_REPO: "gitlab-registry.cern.ch/dss/eos/eos-fusex"
  needs:
    - job: clone_docker
    - job: build_cc7
  allow_failure: true
  when: manual



#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  allow_failure: true
  only:
    - triggers
    - schedules
  tags:
    - docker_node

# @todo rework on the entanglement between the sign, the publish and the removal of the old artifacts
clean_debian_artifacts:
  stage: clean
  image: ubuntu:focal
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - sudo -u stci -H -E ./gitlab-ci/remove_old_artifacts_debian.sh
  allow_failure: true
  only:
    - schedules
  tags:
    - docker_node

# get all the namespaces, filter out the "mgmt" ones, delete if older than 30h
clean_k8s_cluster:
  stage: clean
  image: alpine/k8s:1.18.2
  script:
    - export KUBECONFIG=$K8S_CONFIG
    - set +o pipefail
    - kubectl get namespaces --no-headers | grep -v 'default\|kube-node-lease\|kube-public\|kube-system\|magnum-tiller' |
        awk 'match($3,/[3-9][0-9]+h||[[:alnum:]]+d/) {print $1}' | xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  allow_failure: true
  only:
    - schedules
  tags:
    - docker_node
    - k8s

# @todo cleanup helm leftover for failed / hanging tests. May be merged to 'clean_k8s_cluster'
clean_helm_cluster:
  stage: clean
  image: gitlab-registry.cern.ch/dss/alpine-enhanced:3.13.5
  script:
    - export KUBECONFIG=$K8S_CONFIG
    - echo "Please, implement me!"
  dependencies: []
  allow_failure: true
  only:
    - schedules


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

eos_nginx_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: nginx-cc7-prod

eos_apmon_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: apmon-cc7-prod

eos_apmon_al8:
  stage: build:manual
  image: almalinux:8
  script:
    - dnf install --nogpg -y gcc-c++ cmake make rpm-build which git sssd-client sudo createrepo rsync yum-utils
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - dnf builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}-depend/al-8/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: apmon-al8-prod

eos_microhttpd_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual

eos_docs:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/alma8-base
  script:
    - yum install --nogpg -y make python3-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - cd diopside
    - make html
    - make html
    - sudo -u stci -H rm -rf /eos/project/e/eos/www/docs/diopside/*
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/diopside
  tags:
    - docker_node
  when: manual

eos_repopackage:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
