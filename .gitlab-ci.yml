stages:
  - build:manual
  - prebuild
  - build:rpm
  - clonedocker
  - build:dockerimage
  - test
  - coverage
  - publish
  - clean

default:
  before_script:
    - source gitlab-ci/export_branch.sh
    - echo "Exporting BRANCH=${BRANCH}"
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"


#-------------------------------------------------------------------------------
# Prebuild
#-------------------------------------------------------------------------------

.prebuid-template: &prebuild-template_definition
  stage: prebuild
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - export DESTINATION="gitlab-registry.cern.ch/dss/eos/prebuild-${PREBUILD_NAME}"
    - export DOCKERFILE="$CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/prebuild-${PREBUILD_NAME}.Dockerfile"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    # no need yet for --build-arg PREBUILD_NAME="$PREBUILD_NAME" --build-arg CMAKE_OPTIONS="$CMAKE_OPTIONS" --build-arg CXXFLAGS="$CXXFLAGS"
    - /kaniko/executor --cache="false" --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR
  only:
    variables:
      - $PREBUILD_TRIGGER

prebuid-slc6:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: slc6

prebuild-cc7:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7

prebuild-c8:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: c8

# @note Consider deletion
.prebuild-cc7_asan:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_asan
    CMAKE_OPTIONS: "-DASAN=1"
    CXXFLAGS: "-Wno-parentheses"  # Avoid boost header compilation errors

.prebuild-cc7_clang:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"

.prebuild-cc7_xrd_testing:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_xrd_testing

.prebuild-cc7_coverage:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: cc7_coverage
  only:
    variables:
      - $COVERAGE_SCHEDULE

#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

build_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7
  script:
    - git submodule update --init --recursive
    - mkdir build
    - cd build/
    - cmake3 ../ -DPACKAGEONLY=1
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir cc7_artifacts; cp -R build/SRPMS/ build/RPMS/ cc7_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - cc7_artifacts/
  tags:
    - docker_node
    - cc7

build_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-slc6
  script:
    # Install custom cmake version that has minimal support for features needed
    # by EOS i.e. anything >= 3.12 works fine. To be dropped together with SLC6
    # support.
    - ./misc/cmake/cmake-3.15.5-Linux-x86_64.sh --prefix=/usr/ --skip-license
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-6/x86_64/\ngpgcheck=0\nenabled=1\npriority=1\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_slc6.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir slc6_artifacts; cp -R build/SRPMS build/RPMS slc6_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - slc6_artifacts/
  tags:
    - docker_node
    - slc6

macosx_dmg:
  stage: build:rpm
  script:
    - git submodule update --init --recursive
    - mkdir build
    - mkdir install
    - cd build
    - cmake -DCLIENT=1 -DCMAKE_INSTALL_PREFIX=/usr/local -D ZLIB_ROOT=/usr/local/opt/zlib/ -D OPENSSL_ROOT=/usr/local/opt/openssl/ -D NCURSES_ROOT=/usr/local/opt/ncurses/ -D ZMQ_ROOT=/usr/local/opt/zeromq/ -D XROOTD_ROOT=/usr/local/opt/xrootd/ -D UUID_ROOT=/usr/local/opt/ossp-uuid ..
    - make -j 4
    - make install DESTDIR=../install/
    - version=`../genversion.sh`
    - ../utils/eos-osx-package.sh $version ../install/
    - ccache -s
    - cd ..
    - mkdir osx_artifacts
    - cp build/*.dmg osx_artifacts
  artifacts:
    expire_in: 1 day
    paths:
      - osx_artifacts/
  tags:
    - macosx-shell

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/
  tags:
    - docker_node
    - clone_eosdocker

# schedules ------------------------------

build_c8:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-c8
  script:
    - git submodule update --init --recursive
    - ./misc/cmake/cmake-3.15.5-Linux-x86_64.sh --prefix=/usr/ --skip-license
    - mkdir build
    - cd build/
    - cmake ../ -DPACKAGEONLY=1
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-8/x86_64/\ngpgcheck=0\nenabled=1\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck --allowerasing -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg2 --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir c8_artifacts; cp -R build/SRPMS/ build/RPMS c8_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - c8_artifacts/
  only:
    - schedules
    - tags
  tags:
    - docker_node
    - c8

.build_ubuntu-template: &build_ubuntu-template_definition
  stage: build:rpm
  script:
    - apt-get update -y; apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache gawk
    # @todo re-enable building against latest XRootD master commit when CMake allows using XRootD plugin version 5 libraries
    #- echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' master' >> /etc/apt/sources.list
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' release' >> /etc/apt/sources.list
    - wget -O - http://storage-ci.web.cern.ch/storage-ci/storageci.key 2>/dev/null | apt-key add -
    - apt-get update -y
    - git submodule update --init --recursive
    # @todo once the XRootD deb repos are better structured we can point to a
    # particular stable branch for the moment we force install the version we want
    - export XROOTD_VERSION=`grep "define xrootd_version_min" eos.spec.in | awk -F ':' '{print $2;}'`
    - apt-get install -y xrootd-server=${XROOTD_VERSION} xrootd-clients=${XROOTD_VERSION} libxrootd-dev=${XROOTD_VERSION} libxrootd-private-dev=${XROOTD_VERSION} libxrdapputils1=${XROOTD_VERSION} libxrdcrypto1=${XROOTD_VERSION} libxrdcryptolite1=${XROOTD_VERSION} libxrdxml2=${XROOTD_VERSION} libxrdutils2=${XROOTD_VERSION} libxrootd-server-dev=${XROOTD_VERSION} xrootd-client-libs=${XROOTD_VERSION} xrootd-server-libs=${XROOTD_VERSION} libxrdhttputils1=${XROOTD_VERSION} libxrdserver2=${XROOTD_VERSION} libxrdssilib1=${XROOTD_VERSION} libxrdssishmap1=${XROOTD_VERSION} libxrootd-client-dev=${XROOTD_VERSION} libxrdcl2=${XROOTD_VERSION} libxrdffs2=${XROOTD_VERSION} libxrdposix2=${XROOTD_VERSION} xrootd-client-plugins=${XROOTD_VERSION} xrootd-libs=${XROOTD_VERSION} xrootd-server-plugins=${XROOTD_VERSION} xrootd-plugins=${XROOTD_VERSION}
    - mk-build-deps --build-dep debian/control
    - gdebi -n eos-build-deps-depends*.deb
    - dch --create -v `./genversion.sh` --package eos --urgency low --distribution ${EOS_ARCH} -M "This package is built and released automatically. For important notices and releases subscribe to our mailing lists or visit our website."
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_deb.sh; fi
    - dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages"
    - ccache -s
    - mkdir ${EOS_ARCH}_artifacts/; cp deb_packages/*.deb ${EOS_ARCH}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_ARCH}_artifacts/
  dependencies: []
  allow_failure: true # @todo false for tags

build_ubuntu_bionic:
  image: ubuntu:bionic
  before_script:
    - apt-get update
    - apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
    - apt-add-repository 'deb https://apt.kitware.com/ubuntu/ '${EOS_ARCH}' main'
  <<: *build_ubuntu-template_definition
  variables:
    EOS_ARCH: bionic
  only:
    - schedules
    - tags
  tags:
    - docker_node
    - ubuntu

.build_fedora-template: &build_fedora-template_definition
  stage: build:rpm
  script:
    - dnf install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar dnf-plugins-core ccache rpm-sign
    - git submodule update --init --recursive
    - mkdir build; cd build
    - cmake3 .. -DPACKAGEONLY=1; make srpm; cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/'${EOS_ARCH}'/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck --allowerasing -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_fc.sh; fi
    # @todo: add this flag to have the build pass as it fails during boost header compilation - should be removed in the future ...
    - export CXXFLAGS="-Wno-parentheses"
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg2 --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${EOS_ARCH}_artifacts; cp -R build/SRPMS build/RPMS ${EOS_ARCH}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_ARCH}_artifacts/
  dependencies: []
  allow_failure: true # @todo false for tags

build_fedora_stable:
  image: fedora:31
  <<: *build_fedora-template_definition
  variables:
    EOS_ARCH: fc-31
  only:
    - schedules
    - tags
  tags:
    - docker_node
    - fedora_stable

build_fedora_rawhide:
  image: registry.fedoraproject.org/fedora:rawhide
  <<: *build_fedora-template_definition
  variables:
    EOS_ARCH: fc-rawhide
  only:
    - schedules
  tags:
    - docker_node
    - fedora_rawhide

# @note Using "normal" cc7 image as it doesn't actually need an exotic one, yet
.build_cc7_exotic-template: &build_cc7_exotic-template_definition
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7
  script:
    - git submodule update --init --recursive
    - mkdir build
    - cd build/
    - cmake3 ../ -DPACKAGEONLY=1 ${CMAKE_OPTIONS}
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts; cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/
  dependencies: []
  allow_failure: true

build_cc7_asan:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_asan
    CMAKE_OPTIONS: "-DASAN=1"
    RPMBUILD_OPTIONS: "--with asan"
    CXXFLAGS: "-Wno-parentheses"    # Avoid boost header compilation errors
  only:
    - schedules
  tags:
    - docker_node
    - cc7_asan

build_cc7_clang:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"
    RPMBUILD_OPTIONS: "--with clang"
  only:
    - schedules
  tags:
    - docker_node
    - cc7_clang

build_cc7_xrd_testing: # @todo Re-enable xrd_testing jobs once project ugprades to XRootD 5
  before_script:
    - source gitlab-ci/export_branch.sh
    - echo "Exporting BRANCH=${BRANCH}"
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"
    - echo -e '[xrootd-testing]\nname=XRootD Testing repository\nbaseurl=http://xrootd.web.cern.ch/xrootd/tests/repo/\ngpgcheck=0\nenabled=1\npriority=5\nprotect=0\n' >> /etc/yum.repos.d/xrootd-testing.repo
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_xrd_testing
  only:
    - schedules
  tags:
    - docker_node
    - cc7_xrd_testing
  allow_failure: true

build_cc7_opt_xrootd: # @note please contact CTA team / jleduc if you want to change this job
  before_script:
    - source gitlab-ci/export_branch.sh
    - echo "Exporting BRANCH=${BRANCH}"
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"
    - sed -i "s/pgm \/usr\/bin\/xrdcp/pgm \/bin\/true/g" misc/etc/xrd.cf.fst
  <<: *build_cc7_exotic-template_definition
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7
  variables:
    BUILD_NAME: cc7_opt_xrootd
    CMAKE_OPTIONS: "-DEOS_XROOTD=1"
    RPMBUILD_OPTIONS: "--with eos_xrootd_rh"
  allow_failure: true
  except:
    - tags
  tags:
    - docker_node
    - cc7_opt_xrootd
  when: manual

build_cc7_coverage:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_coverage
    RPMBUILD_OPTIONS: "--with coverage"
  only:
    variables:
      - $COVERAGE_SCHEDULE
  tags:
    - docker_node
    - cc7


#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

.build_dockerimage-template: &build_dockerimage-template_definition
  stage: build:dockerimage
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -n "$CI_COMMIT_TAG" ]];
      then export CACHE="false"; export IMAGE_TAG="$BASETAG$CI_COMMIT_TAG";
      else export CACHE="true"; export IMAGE_TAG="$BASETAG$CI_COMMIT_SHORT_SHA";
      fi
    - echo "$CACHE - $IMAGE_TAG"
    - export DESTINATION="gitlab-registry.cern.ch/dss/eos:${IMAGE_TAG}"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=$CACHE --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR
  retry: 1

cc7_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile
    BASETAG: ""
  dependencies:
    - build_cc7
    - clone_docker

ubuntu_bionic_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_ubuntu_bionic
    BASETAG: "ubuntu_bionic_client_"
  dependencies:
    - build_ubuntu_bionic
    - clone_docker
  only:
    - schedules
    - tags
  allow_failure: true

# schedules ------------------------------

c8_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_c8
    BASETAG: "c8_"
  dependencies:
    - build_c8
    - clone_docker
  only:
    - schedules
    - tags
  allow_failure: true

cc7_asan_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_asan
    BASETAG: "asan_"
  dependencies:
    - build_cc7_asan
    - clone_docker
  only:
    - schedules
  allow_failure: true


# @todo Re-enable xrd_testing jobs once project ugprades to XRootD 5
# xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
.cc7_xrd_testing_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_xrd_testing
    BASETAG: "xrd_testing_"
  dependencies:
    - build_cc7_xrd_testing
    - clone_docker
  only:
    - schedules
  allow_failure: true

.cc7_coverage_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_coverage
    BASETAG: "coverage_"
  dependencies:
    - build_cc7_coverage
    - clone_docker
  only:
    variables:
      - $COVERAGE_SCHEDULE
  allow_failure: true


#-------------------------------------------------------------------------------
# Dock8rnetes testing framework (exec_cmd wraps both docker and k8s!)
#-------------------------------------------------------------------------------

.dock8s_before_script_template: &dock8s_before_script_template
  before_script:
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        source ./gitlab-ci/before_script_k8s_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type k8s $K8S_NAMESPACE;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        source ./gitlab-ci/before_script_docker_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type docker;
      fi

.dock8s_after_script_template: &dock8s_after_script_template
  after_script:
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        ./gitlab-ci/after_script_k8s_test.sh;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        ./gitlab-ci/after_script_docker_test.sh;
      fi

.dock8s_system_test_template: &dock8s_system_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    - date
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-mgm1 'eos-instance-test-ci'
    - date
    - exec_cmd eos-mgm1 'eos-unit-tests-with-instance -n root://localhost//eos/dockertest/'
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    - date
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_cnvrt_fsck_template: &dock8s_cnvrt_fsck_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-test-utils ./eos-test-utils
    # converter
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-converter-test ./eos-converter-test; chmod +x eos-converter-test
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        ./eos-converter-test --type k8s $K8S_NAMESPACE;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        ./eos-converter-test --type docker;
      fi
    - rm -rf eos-converter-test
    # fsck
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-fsck-test ./eos-fsck-test; chmod +x eos-fsck-test
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        ./eos-fsck-test --max-delay 600 --type k8s $K8S_NAMESPACE;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        ./eos-fsck-test --max-delay 600 --type docker;
      fi
    - rm -rf eos-fsck-test
    - rm -rf eos-test-utils
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_fusex_test_template: &dock8s_fusex_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # fusex benchmark
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-cli1 'su eos-user -c "mkdir -p /eos1/dockertest/fusex_tests/ && cd /eos1/dockertest/fusex_tests/ && fusex-benchmark"'
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    # download tests repo
    - exec_cmd eos-cli1 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'
    # ubuntu releases do not support 'clone' yet
    - if [[ ! $CI_JOB_NAME =~ "ubuntu" ]]; then
        exec_cmd eos-cli1 'cd /eosclient-tests; git checkout rtb_clone; prepare/clone_test.sh prepare; rc=$?; git checkout master; exit $rc';
      fi
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]];
    # then
    #   exec_cmd eos-mgm1 'eos vid add gateway "eos-cli1.eos-cli1.${K8S_NAMESPACE}.svc.cluster.local" unix';
    #   exec_cmd eos-cli1 'env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci';
    # fi
    # until then just run the "ci" tests
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n prepare; done'
    - exec_cmd eos-cli1 'su eos-user -c "python2 /eosclient-tests/run.py --workdir=\"/eos1/dockertest /eos2/dockertest\" ci"'
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n cleanup; done'
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_cbox_test_template: &dock8s_cbox_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    # enable converter and prepare eoshome folder, cernbox alike
    - exec_cmd eos-mgm1 'eos space config default space.converter=on'
    - exec_cmd eos-mgm1 './eos_create_userhome.sh eos-user'
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos/ && mount -t fuse eosxd -ofsname=eosdockertest /eos/"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # set krb5 ticket and download tests repo
    - exec_cmd eos-cli1 'su eos-user -c "kinit eos-user@TEST.EOS -k -t /home/eos-user/eos-user.keytab"'
    - exec_cmd eos-cli1 'su eos-user -c "git clone https://gitlab.cern.ch/dss/eosclient-tests.git /eos/user/e/eos-user/eosclient-tests"'
    # launch the tests
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user ci-eosfuse_release"'
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user regression"'
  <<: *dock8s_after_script_template
  allow_failure: true # @note remove soon, once stable
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

k8s_system:
  <<: *dock8s_system_test_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

k8s_cnvrt_fsck:
  <<: *dock8s_cnvrt_fsck_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

k8s_fusex:
  <<: *dock8s_fusex_test_template
  dependencies: []
  retry: 1
  allow_failure: true
  tags:
    - shell-with-kubernetes

k8s_cbox:
  <<: *dock8s_cbox_test_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

k8s_stress:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - TEST_URL="eos-mgm1.eos-mgm1.$K8S_NAMESPACE.svc.cluster.local"
    - exec_cmd eos-mgm1 "hammer-runner.py --strict-exit-code 1 --gitlab --url ${TEST_URL}//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000"
  <<: *dock8s_after_script_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

dock_system:
  <<: *dock8s_system_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_cnvrt_fsck:
  <<: *dock8s_system_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_fusex:
  <<: *dock8s_fusex_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_cbox:
  <<: *dock8s_fusex_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_stress:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - TEST_URL="eos-mgm1.eoscluster.cern.ch"
    - exec_cmd eos-mgm1 "hammer-runner.py --strict-exit-code 1 --gitlab --url ${TEST_URL}//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000"
  <<: *dock8s_after_script_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

.unit_test_template: &unit_test_template_definition
  stage: test
  script:
    # generic unit tests
    - eos-unit-tests
    - eos-unit-tests-fst
    - eos-fusex-tests
    # namespace specific unit tests
    - export EOS_QUARKDB_HOSTPORT=localhost:7777
    - quarkdb-create --path /var/quarkdb/node-0
    - chown -R daemon:daemon /var/quarkdb/node-0
    - /usr/bin/xrootd -n qdb -c /etc/xrd.cf.quarkdb -l /var/log/eos/xrdlog.qdb -b -Rdaemon
    - eos-ns-quarkdb-tests
  dependencies: []
  retry: 1
  tags:
     - docker_node
     - unit_tests

unit_test:tag:
  image:
    name: gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  only:
    - tags

unit_test:
  image:
    name: gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_SHORT_SHA}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  except:
    - tags

# schedules ------------------------------

k8s_system_c8:
  <<: *dock8s_system_test_template
  variables:
    BASETAG: "c8_"
  dependencies: []
  retry: 1
  allow_failure: true
  only:
    - schedules
    - tags
  tags:
    - shell-with-kubernetes

k8s_cbox_c8:
  <<: *dock8s_cbox_test_template
  variables:
    BASETAG: "c8_"
  dependencies: []
  retry: 1
  allow_failure: true
  only:
    - schedules
    - tags
  tags:
    - shell-with-kubernetes

k8s_fusex_ubuntu:
  <<: *dock8s_fusex_test_template
  variables:
    CLI_BASETAG: "ubuntu_bionic_client_"
  dependencies: []
  retry: 1
  allow_failure: true
  only:
    - schedules
    - tags
  tags:
    - shell-with-kubernetes

# @todo Re-enable xrd_testing jobs once project ugprades to XRootD 5
# xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
.k8s_system_xt:
  <<: *dock8s_system_test_template
  variables:
    BASETAG: "xrd_testing_"
  dependencies: []
  retry: 1
  allow_failure: true
  only:
    - schedules
  tags:
    - shell-with-kubernetes

dock_system_c8:
  <<: *dock8s_system_test_template
  variables:
    BASETAG: "c8_"
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1
  only:
    - schedules
    - tags
  tags:
    - shell-with-docker
  when: manual

dock_cbox_c8:
  <<: *dock8s_cbox_test_template
  variables:
    BASETAG: "c8_"
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1
  only:
    - schedules
    - tags
  tags:
    - shell-with-docker
  when: manual

dock_fusex_ubuntu:
  <<: *dock8s_fusex_test_template
  variables:
    CLI_BASETAG: "ubuntu_bionic_client_"
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1
  only:
    - schedules
    - tags
  tags:
    - shell-with-docker
  when: manual

# @todo Re-enable xrd_testing jobs once project ugprades to XRootD 5
# xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
.dock_system_xt:
  <<: *dock8s_system_test_template
  variables:
    BASETAG: "xrd_testing_"
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1
  only:
    - schedules
  tags:
    - shell-with-docker
  when: manual

unit_test_asan:
  image:
    name: gitlab-registry.cern.ch/dss/eos:asan_${CI_COMMIT_SHORT_SHA}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  variables:
    LSAN_OPTIONS: "suppressions=/var/eos/test/LeakSanitizer.supp"  # Suppress known memory leaks. For the generic tests
    ASAN_OPTIONS: "fast_unwind_on_malloc=0"  # Avoid indirect leaks from linked dependencies. For the namespace tests
  allow_failure: true
  only:
    - schedules


#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------

.publish_koji_template: &publish_koji_template_definition
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client
    - yum install -y koji
    - mkdir ~/.koji
    - echo -e '[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False\n' >> ~/.koji/config
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build ${TARGET} ${BUILD_NAME}_artifacts/SRPMS/*.src.rpm
  only:
    - tags
  tags:
    - docker_node
    - publish

publish_koji_c8:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos8"
    BUILD_NAME: "c8"
  dependencies:
    - build_c8

publish_koji_cc7:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos7"
    BUILD_NAME: "cc7"
  dependencies:
    - build_cc7

publish_koji_slc6:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos6"
    BUILD_NAME: "slc6"
  dependencies:
    - build_slc6

rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  except:
    - tags
  allow_failure: true
  when: manual

rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  only:
    - master
    - tags
  retry: 2

rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${BRANCH} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${BRANCH}/tag/latest_version
  tags:
    - docker_node
    - publish
  only:
    - tags
  dependencies: []
  when: manual

debian_artifacts:
  stage: publish
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${BRANCH} ${BUILD_TYPE}
  dependencies:
    - build_ubuntu_bionic
  only:
    - schedules
    - tags
  retry: 2
  allow_failure: true
  tags:
    - docker_node
    - publish

debian_artifacts_volume:
  stage: publish
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - ./gitlab-ci/store_artifacts_debian.sh /mnt/eos_repositories/debian/eos/${BRANCH} tag
  dependencies:
    - build_ubuntu_bionic
  only:
    - tags
  tags:
    - docker_node
    - publish


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  allow_failure: true
  only:
    - triggers
    - schedules
  tags:
    - docker_node
    - clean

clean_debian_artifacts:
  stage: clean
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts_debian.sh
  allow_failure: true
  only:
    - schedules
  tags:
    - docker_node
    - clean

clean_k8s_cluster:
  stage: clean
  script:
    - set +o pipefail
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - kubectl get pods --no-headers --all-namespaces | 
      grep -E 'ImagePullBackOff|ErrImagePull|Evicted' | 
      awk '{print $2 " --namespace=" $1}' | 
      xargs --no-run-if-empty -n2 kubectl delete pods
    - kubectl get namespaces --no-headers -o custom-columns=":metadata.name,:.metadata.creationTimestamp" | 
      grep -v 'default\|kube-public\|kube-system\|kube-node-lease' |
      awk '$2 <= "'$( date --utc -d "1 day ago" +"%Y-%m-%dT%H:%M:%SZ" )'" { print $1 }' |
      xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  allow_failure: true
  only:
    - schedules
  tags:
    - shell-with-kubernetes


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

eos_nginx_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: nginx-slc6-prod

eos_nginx_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual
  environment:
    name: nginx-cc7-prod

eos_apmon_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - mkdir -p rpmbuild/{BUILD,BUILDROT,RPMS,SOURCES,SPECS,SRPMS}
    - cp eos-apmon-*.tar.gz rpmbuild/SOURCES
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -bs eos-apmon.spec
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/SRPM
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/SRPMS/*.src.rpm $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: apmon-slc6-prod

eos_apmon_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual
  environment:
    name: apmon-cc7-prod

eos_microhttpd_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git tar sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual

eos_microhttpd_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual

eos_docs:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker_node
  when: manual

eos_repopackage:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
