# ************************************************************************
# * EOS - the CERN Disk Storage System                                   *
# * Copyright (C) 2023 CERN/Switzerland                                  *
# *                                                                      *
# * This program is free software: you can redistribute it and/or modify *
# * it under the terms of the GNU General Public License as published by *
# * the Free Software Foundation, either version 3 of the License, or    *
# * (at your option) any later version.                                  *
# *                                                                      *
# * This program is distributed in the hope that it will be useful,      *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
# * GNU General Public License for more details.                         *
# *                                                                      *
# * You should have received a copy of the GNU General Public License    *
# * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
# ************************************************************************

stages:
  - build:manual
  - prebuild
  - build:rpm
  - build:dockerimage
  - test
  - publish
  - clean

variables:
  CODENAME: "diopside"

default:
  before_script:
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"

include:
  # - template: Code-Quality.gitlab-ci.yml
  #  - local: /gitlab-ci/.gitlab-ci-test-dock_include.yml @note on the file
  #  - local: /gitlab-ci/.gitalb-ci-build-macos.yml
  - local: /gitlab-ci/.gitlab-ci-build-ubuntu.yml
  - local: /gitlab-ci/.gitlab-ci-test-k8s_include.yml
  - local: /gitlab-ci/.gitlab-ci-test-helm_include.yml

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      variables:
        #KOJI_SCRATCH: "--scratch --skip-tag"
        KOJI_SCRATCH: "--scratch"
    - if: $CI_COMMIT_TAG
      variables:
        KOJI_SCRATCH: ""
#-------------------------------------------------------------------------------
# Prebuild
#-------------------------------------------------------------------------------
.doc-skip:
  stage: .pre
  script:
    - |
      if git diff --name-only $CI_COMMIT_BEFORE_SHA..$CI_COMMIT_SHA | grep -qv '^docs/'; then
         echo "Non doc changes detected, running full pipeline"
         exit 0
      fi
      echo "Documentation-only changes detected. Skipping pipeline."
      # In an ideal world this job failing at the top should not trigger builds
      # we don't live in that world! In order to avoid creating more complex
      # dependency graphs, we just cancel the pipeline
      curl -X POST -H "PRIVATE-TOKEN: $GITLAB_CI_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel"
      exit 1
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
        - docs/**/*
      when: always
    - when: never


.prebuild-template: &prebuild-template_definition
  stage: prebuild
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - export DESTINATION="gitlab-registry.cern.ch/dss/eos/prebuild-${PREBUILD_NAME}-${CODENAME}"
    - export DOCKERFILE="$CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/prebuild-${PREBUILD_NAME}.Dockerfile"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    # no need yet for --build-arg PREBUILD_NAME="$PREBUILD_NAME" --build-arg CMAKE_OPTIONS="$CMAKE_OPTIONS" --build-arg CXXFLAGS="$CXXFLAGS"
    - /kaniko/executor --cache="false" --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR --build-arg=EOS_CODENAME="${CODENAME}" --compressed-caching=false --use-new-run
  only:
    variables:
      - $PREBUILD_TRIGGER


prebuild-el8:
  extends: .prebuild-template
  variables:
    PREBUILD_NAME: el8


prebuild-el9:
  extends: .prebuild-template
  variables:
    PREBUILD_NAME: el9


prebuild-el10:
  extends: .prebuild-template
  variables:
    PREBUILD_NAME: el10


prebuild-el9-arm64:
  extends: .prebuild-template
  variables:
    PREBUILD_NAME: el9-arm64
  tags:
    - k8s-arm


.prebuild-el9_coverage:
  extends: .prebuild-template
  variables:
    PREBUILD_NAME: el9_coverage
  only:
    variables:
      - $COVERAGE_SCHEDULE


clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - dnf install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/


#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

.build-template: &build-template_definition
  stage: build:rpm
  variables:
    PKG_MGR: dnf
    CMAKE_BIN: cmake
  script:
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - mkdir build; cd build; ${CMAKE_BIN} .. -DPACKAGEONLY=1 -DEOS_GRPC_GW=1 -Wno-dev; make srpm; cd ..;
    - echo -e "[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-$(rpm --eval '%{rhel}')/$(uname -m)/\ngpgcheck=0\nenabled=1\npriority=2\n" >> /etc/yum.repos.d/eos-depend.repo
    - |
      if [[ ${PKG_MGR} == "yum" ]]; then
        ${PKG_MGR} remove --nogpgcheck -y eos-xrootd;
        ${PKG_MGR}-builddep --nogpgcheck -y --setopt="cern*.exclude=xrootd*" build/SRPMS/*;
      else
        ${PKG_MGR} builddep --nogpgcheck --allowerasing -y --setopt="cern*.exclude=xrootd*" build/SRPMS/*;
      fi
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        export CCACHE_DISABLE=1;
        ${PKG_MGR} install -y gnupg2;
      else
        source gitlab-ci/setup_ccache.sh;
      fi
    # [BEGIN] Build custom eos-xrootd RPMS
    - ${PKG_MGR} install -y dnf-plugins-core epel-release krb5-workstation rpmdevtools sudo git
    #- groupadd xrootd && useradd -g xrootd -m xrootd && echo "xrootd ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers
    #- su - xrootd
    - BRANCH=scitoken-stage-support
    - VERSION=5.8.4
    - git clone https://github.com/jafonso/xrootd -b ${BRANCH} xrootd-${VERSION}
    - cd xrootd-${VERSION}
    - rpmdev-setuptree
    - git archive --prefix xrootd-${VERSION}/ -o $(rpm -E '%{_sourcedir}')/xrootd-${VERSION}.tar.gz HEAD
    - ${PKG_MGR} builddep -y eos-xrootd.spec
    - rpmbuild -ba --without tests --with git eos-xrootd.spec --define "_smp_mflags -j4"
    - ${PKG_MGR} install -y ~/rpmbuild/RPMS/*/*.rpm
    - cd ..
    # [END] Build custom eos-xrootd RPMS
    - rpmbuild --rebuild --with server --with eos_grpc_gateway --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | (ts 2> dev/null || true; tee)
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg2 --batch --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts; cp -rv build/*RPMS/ build/eos-*.tar.gz ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 60 days
    paths:
      - ${BUILD_NAME}_artifacts/


build_el8:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el8-${CODENAME}
  variables:
    BUILD_NAME: el-8
  extends: .build-template
  only:
    - schedules
    - tags


build_el9:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el9-${CODENAME}
  variables:
    BUILD_NAME: el-9
  extends: .build-template


build_el10:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el10-${CODENAME}
  variables:
    BUILD_NAME: el-10
  extends: .build-template
  only:
    - schedules
    - tags


build_el9_arm64:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el9-arm64-${CODENAME}
  variables:
    BUILD_NAME: el-9-arm64
  extends: .build-template
  tags:
    - k8s-arm
  only:
    - schedules
    - tags


#-------------------------------------------------------------------------------
# EOS client builds for RHEL
#-------------------------------------------------------------------------------

.build-client-srpm-template: &build-client-srpm-template_definition
  stage: build:rpm
  script:
    - update-crypto-policies --set LEGACY
    - dnf config-manager --add-repo https://linuxsoft.cern.ch/cern/rhel/$(rpm --eval '%{rhel}')/CERN/$(uname -m)/ --set-enabled
    - dnf install cern-gpg-keys --nogpgcheck -y
    - rpm --import /etc/pki/rpm-gpg/*
    - dnf install rpm-build cmake gcc-c++ git -y
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - mkdir -pv build; cd build;
    - cmake ../ -DPACKAGEONLY=1 -DCLIENT=1 -Wno-dev
    - make srpm; cd ..;
    - mkdir -p ${CI_JOB_NAME}_artifacts
    - cp -rv build/SRPMS/ ${CI_JOB_NAME}_artifacts
  artifacts:
    expire_in: 60 days
    paths:
      - ${CI_JOB_NAME}_artifacts
  only:
    - schedules
    - tags


rh-8:
 extends: .build-client-srpm-template
 image: gitlab-registry.cern.ch/linuxsupport/ubi8/ubi


rh-9:
 extends: .build-client-srpm-template
 image: gitlab-registry.cern.ch/linuxsupport/ubi9/ubi


rh-10:
 extends: .build-client-srpm-template
 image: gitlab-registry.cern.ch/linuxsupport/ubi10/ubi


#-------------------------------------------------------------------------------
# Fedora builds
#-------------------------------------------------------------------------------

.build-fedora-template: &build-fedora-template_definition
  stage: build:rpm
  script:
    - dnf install --nogpg -y gcc-c++ cmake make rpm-build which git tar dnf-plugins-core ccache rpm-sign
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - mkdir build; cd build
    - cmake .. -DPACKAGEONLY=1 -Wno-dev; make srpm; cd ..
    - echo -e "[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/${BUILD_NAME}/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n" > /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck --allowerasing -y build/SRPMS/*
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_fc.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg2 --batch --import $STCI_REPO_KEY; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts; cp -R build/SRPMS build/RPMS ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 60 days
    paths:
      - ${BUILD_NAME}_artifacts/
  allow_failure: true


build_fedora_38:
  extends: .build-fedora-template
  image: registry.fedoraproject.org/fedora:38
  variables:
    BUILD_NAME: fc-38
  only:
    - schedules
    - tags


build_fedora_rawhide:
  extends: .build-fedora-template
  image: registry.fedoraproject.org/fedora:rawhide
  variables:
    BUILD_NAME: fc-rawhide
  only:
    - schedules
  when: manual


#-------------------------------------------------------------------------------
# Exotic builds
#-------------------------------------------------------------------------------

.build_exotic-template: &build_exotic-template_definition
  stage: build:rpm
  variables:
    PKG_MGR: dnf
    CMAKE_CMD: cmake3
  script:
    - export DIST=$(rpm --eval '%{rhel}')
    - ${PKG_MGR} install -y git ccache tar sudo which tar gzip moreutils
    - git submodule sync --recursive && git submodule update --init -f --recursive
    - mkdir build; cd build
    - ${CMAKE_CMD} .. -DPACKAGEONLY=1 ${CMAKE_OPTIONS} -Wno-dev
    - make srpm; cd ..;
    - |
      if [[ "$RPMBUILD_OPTIONS" == *asan* ]]; then
        echo -e "[eos-asan-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-${DIST}-asan/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n" > /etc/yum.repos.d/eos-depend.repo;
        # Install the asan enabled dependencies
        ${PKG_MGR} remove -y eos-xrootd eos-folly eos-grpc eos-rocksdb || true;
      elif [[ "$RPMBUILD_OPTIONS" == *tsan* ]]; then
        echo -e "[eos-tsan-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-${DIST}-tsan/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n" > /etc/yum.repos.d/eos-depend.repo;
        # Install the tsan enabled dependencies
        ${PKG_MGR} remove -y eos-xrootd eos-folly eos-grpc eos-rocksdb || true;
      else
        echo -e "[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/${CODENAME}-depend/el-${DIST}/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n" > /etc/yum.repos.d/eos-depend.repo;
      fi
    - |
      if [[ ${PKG_MGR} == "yum" ]]; then
        ${PKG_MGR}-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
      else
        ${PKG_MGR} install -y dnf-plugins-core
        ${PKG_MGR} builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
      fi
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - gpg --batch --import $STCI_REPO_KEY; printf "" |
      setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm
    - mkdir ${BUILD_NAME}_artifacts
    - cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/
  dependencies: []
  allow_failure: true


build_el9_asan:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el9-${CODENAME}
  variables:
    CMAKE_CMD: cmake
    BUILD_NAME: el-9-asan
    CMAKE_OPTIONS: "-DASAN=1"
    RPMBUILD_OPTIONS: "--with server --with asan"
    CXXFLAGS: "-Wno-parentheses"    # Avoid boost header compilation errors
  before_script:
    - ${PKG_MGR} install -y epel-release libasan cmake gcc gcc-c++ rpmdevtools
  extends: .build_exotic-template
  when: manual


build_client_el9_tsan:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el9-${CODENAME}
  variables:
    CMAKE_CMD: cmake
    BUILD_NAME: el-9-tsan
    CMAKE_OPTIONS: "-DTSAN=1"
    RPMBUILD_OPTIONS: "--with tsan"
    CXXFLAGS: "-Wno-parentheses"    # Avoid boost header compilation errors
  before_script:
    - ${PKG_MGR} install -y epel-release libtsan cmake gcc gcc-c++ which rpmdevtools
  extends: .build_exotic-template
  when: manual


build_el9_clang:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el9-${CODENAME}
  variables:
    BUILD_NAME: el-9-clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"
    RPMBUILD_OPTIONS: "--with clang --with server"
  extends: .build_exotic-template
  only:
    - schedules
    - triggers


# @note Please contact CTA team / jleduc if you want to change this job
build_cc7_opt_xrootd:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7-${CODENAME}
  variables:
    PKG_MGR: yum
    BUILD_NAME: cc7_opt_xrootd
    CMAKE_OPTIONS: "-DEOS_XROOTD=1"
    RPMBUILD_OPTIONS: "--with eos_xrootd_rh"
  before_script:
    - sed -i "s/pgm \/usr\/bin\/xrdcp/pgm \/bin\/true/g" misc/etc/xrd.cf.fst
  except:
    - tags
  extends: .build_exotic-template
  when: manual


build_el9_coverage:
  image: gitlab-registry.cern.ch/dss/eos/prebuild-el9-${CODENAME}
  variables:
    BUILD_NAME: el9_coverage
    RPMBUILD_OPTIONS: "--with coverage"
  only:
    variables:
      - $COVERAGE_SCHEDULE
  extends: .build_exotic-template

#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

.build_dockerimage-template:
  stage: build:dockerimage
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    EXTRA_TAG: ""
  script:
    # @note keep $CACHE orthogonal to $IMAGE_TAG, do not join the "if"s
    - if [[ -n "$CI_COMMIT_TAG" ]] || [[ "x$CI_PIPELINE_SOURCE" == "xschedule" ]];
      then CACHE="false";
      else CACHE="true";
      fi
    - if [[ -n "$CI_COMMIT_TAG" ]];
      then IMAGE_TAG="$CI_COMMIT_TAG${OS_TAG}${EXTRA_TAG}";
      else IMAGE_TAG="$CI_COMMIT_SHORT_SHA${OS_TAG}${EXTRA_TAG}";
      fi
    - IMAGE_REPO="gitlab-registry.cern.ch/dss/eos/eos-ci"
    - DESTINATION="${IMAGE_REPO}:${IMAGE_TAG}"
    - echo "CACHE=$CACHE - DESTINATION=$DESTINATION"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - echo $DOCKERFILE
    - /kaniko/executor --cache=$CACHE --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR --build-arg=EOS_CODENAME="${CODENAME}" --compressed-caching=false --use-new-run
  retry: 1


el9_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: gitlab-ci/Dockerfile_eos_el9
    OS_TAG: ".el9"
  needs:
    - job: clone_docker
    - job: build_el9

el10_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_el10
    OS_TAG: ".el10"
  needs:
    - job: clone_docker
    - job: build_el10
  only:
    - schedules
    - tags


el9_asan_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_el9_asan
    EXTRA_TAG: "_asan"
    OS_TAG: ".el9"
  needs:
    - job: clone_docker
    - job: build_el9_asan
  when: manual
  allow_failure: true


.el9_coverage_docker_image:
  extends: .build_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/Dockerfile_coverage
    EXTRA_TAG: "_coverage"
    OS_TAG: ".el9"
  needs:
    - job: clone_docker
    - job: build_el9_coverage
  only:
    variables:
      - $COVERAGE_SCHEDULE
  allow_failure: true


#-------------------------------------------------------------------------------
# Code quality, from codeclimate plugins - disabled
#-------------------------------------------------------------------------------

# .code_quality:
#   artifacts:
#     paths: [gl-code-quality-report.json]
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "schedule"'
#       allow_failure: true

# .code_quality_html:
#   extends: code_quality
#   variables:
#     REPORT_FORMAT: html
#   artifacts:
#     paths: [gl-code-quality-report.html]

#-------------------------------------------------------------------------------
# Dock8rnetes testing framework (exec_cmd wraps both docker and k8s!)
#-------------------------------------------------------------------------------

.dock8s_before_script_template: &dock8s_before_script_template
  stage: test
  before_script:
    - case $CI_JOB_NAME in
      "k8s"*  )
        source ./gitlab-ci/before_script_k8s_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type k8s $K8S_NAMESPACE ;;
      "dock"* )
        source ./gitlab-ci/before_script_docker_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type docker; ;;
      esac
  variables:
    OS_TAG: ".el9"


.dock8s_after_script_template: &dock8s_after_script_template
  after_script:
    - case $CI_JOB_NAME in
      "k8s"*  )
        source ./gitlab-ci/after_script_k8s_test.sh ;;
      "dock"* )
        source ./gitlab-ci/after_script_docker_test.sh ;;
      esac


.dock8s_system_test_template:
  extends:
    - .dock8s_before_script_template
    - .dock8s_after_script_template
  script:
    - date
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-mgm1 'eos-instance-test-ci'
    - date
    - exec_cmd eos-mgm1 'eos-unit-tests-with-instance -n root://localhost//eos/dockertest/'
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    - date
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-test-utils ./eos-test-utils; chmod +x eos-test-utils
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-fst-close-test ./eos-fst-close-test; chmod +x eos-fst-close-test
    - case $CI_JOB_NAME in
      "k8s"*  )
        export EOS_MGM_URL="root://eos-mgm1.eos-mgm1.$K8S_NAMESPACE.svc.cluster.local";
        ./eos-fst-close-test --mgm ${EOS_MGM_URL} --type k8s $K8S_NAMESPACE ;;
      "dock"* )
        ./eos-fst-close-test --type docker ;;
      esac
    - date
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/


.dock8s_cnvrt_fsck_template:
  extends:
    - .dock8s_before_script_template
    - .dock8s_after_script_template
  script:
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-test-utils ./eos-test-utils; chmod +x eos-test-utils
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-convert-test ./eos-convert-test; chmod +x eos-convert-test
    - cp_to_local_cmd eos-cli1:/usr/sbin/eos-fsck-test ./eos-fsck-test; chmod +x eos-fsck-test
    - case $CI_JOB_NAME in
      "k8s"*  )
        ./eos-convert-test --type k8s $K8S_NAMESPACE;
        ./eos-fsck-test --max-delay 600 --type k8s $K8S_NAMESPACE ;;
      "dock"* )
        ./eos-convert-test --type docker;
        ./eos-fsck-test --max-delay 600 --type docker ;;
      esac
    - rm -rf eos-convert-test
    - rm -rf eos-fsck-test
    - rm -rf eos-test-utils
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/


.dock8s_rtb_clone_template:
  extends:
    - .dock8s_before_script_template
    - .dock8s_after_script_template
  script:
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # download tests repo
    - exec_cmd eos-cli1 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'
    - exec_cmd eos-cli1 'cd /eosclient-tests && pip install -r requirements.txt'
    # ubuntu releases do not support 'clone' yet, skip its test
    - case $CI_JOB_NAME in
      "ub_focal"* | "ub_jammy"* ) ;;
      *                          ) exec_cmd eos-cli1 'cd /eosclient-tests; clone_tests/clone_test.sh prepare; rc=$?; exit $rc' ;;
      esac
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/


.dock8s_fusex_test_template:
  extends:
    - .dock8s_before_script_template
    - .dock8s_after_script_template
  script:
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # fusex functional bindings
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eosfunctionaltest/ && mount -t fuse eosxd -ofsname=eosdockertest /eosfunctionaltest/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && [[ ! -d /eosfunctionaltest/dockertest/ ]] ; do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    - exec_cmd eos-cli1 'su eos-user -c "mkdir -m 700 -p /eosfunctionaltest/dockertest/credentialtest/ && cd /eosfunctionaltest/dockertest/credentialtest/"'
    - exec_cmd eos-cli1 'su eos-user -c "eos-test-credential-bindings /eosfunctionaltest/dockertest/credentialtest/"'
    # fusex benchmark
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-cli1 'su eos-user -c "mkdir -p /eos1/dockertest/fusex_tests/ && cd /eos1/dockertest/fusex_tests/ && fusex-benchmark"'
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    # download tests repo
    - exec_cmd eos-cli1 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'
    - exec_cmd eos-cli1 'cd /eosclient-tests && pip install -r requirements.txt'
    # run the tests

    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]];
    # then
    #   exec_cmd eos-mgm1 'eos vid add gateway "eos-cli1.eos-cli1.${K8S_NAMESPACE}.svc.cluster.local" unix';
    #   exec_cmd eos-cli1 'env EOS_FUSE_NO_ROOT_SQUASH=1 python3 /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci';
    # fi
    # until then just run the "ci" tests
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n prepare; done'
    - exec_cmd eos-cli1 'su eos-user -c "python3 /eosclient-tests/run.py --workdir=\"/eos1/dockertest /eos2/dockertest\" ci"'
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n cleanup; done'

    # fusex test SAMBA gateways authentication settings
    # this will run on the client pod
    - exec_cmd eos-mgm1 'eos vid enable sss'
    - exec_cmd eos-mgm1 'eos vid enable unix'
    - CLI_POD_HOSTNAME="$(exec_cmd eos-cli1 'hostname -f')"
    - echo ${CLI_POD_HOSTNAME}
    - exec_cmd eos-mgm1 "eos vid add gateway ${CLI_POD_HOSTNAME} unix"
    - exec_cmd eos-cli1 'eos-fusex-functional-test --samba'
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_cbox_test_template:
  extends:
    - .dock8s_before_script_template
    - .dock8s_after_script_template
  script:
    # enable converter and prepare eoshome folder, cernbox alike
    - exec_cmd eos-mgm1 'eos convert config set status=on'
    - exec_cmd eos-mgm1 './eos_create_userhome.sh eos-user'
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos/ && mount -t fuse eosxd -ofsname=eosdockertest /eos/"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # set krb5 ticket and download tests repo @note the 'export KRB5CCNAME to FILE: type' is a spooky trick, can be made nicer.
    - exec_cmd eos-cli1 'echo -e "export KRB5CCNAME=FILE:/tmp/krb5cc_$(id -u eos-user)" >> ~/.bashrc'
    - exec_cmd eos-cli1 'su eos-user -c "kinit eos-user@TEST.EOS -k -t /home/eos-user/eos-user.keytab"'
    - exec_cmd eos-cli1 'su eos-user -c "git clone https://gitlab.cern.ch/dss/eosclient-tests.git /eos/user/e/eos-user/eosclient-tests"'
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user/eosclient-tests && pip install -r requirements.txt"'
    # launch the tests
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python3 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user ci-eosfuse_release"'
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python3 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user regression"'
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/


.dock8s_flamegraph_test_template:
  extends:
    - .dock8s_before_script_template
    - .dock8s_after_script_template
  script:
    - date
    - echo 0 > /proc/sys/kernel/perf_event_paranoid; cat /proc/sys/kernel/perf_event_paranoid
    - echo 0 > /proc/sys/kernel/kptr_restrict; cat /proc/sys/kernel/kptr_restrict
    - exec_cmd eos-mgm1 "mkdir eos-flamegraph-data; cd eos-flamegraph-data; /usr/sbin/eos-make-flamegraph"
  artifacts:
    expire_in: 1 days
    paths:
      - eos-logs-${CI_JOB_ID}/


.unit_test_template: &unit_test_template_definition
  stage: test
  variables:
    OS_TAG: ".el9"
  script:
    # generic unit tests
    - eos-unit-tests
    - eos-unit-tests-fst
    - eos-fusex-tests
    - pip3 install pytest; python3 -m pytest /usr/sbin/test-eos-iam-mapfile.py
    # namespace specific unit tests
    - export EOS_QUARKDB_HOSTPORT=localhost:7777
    - quarkdb-create --path /var/quarkdb/node-0
    - chown -R daemon:daemon /var/quarkdb/node-0
    - xrootd -n qdb -c /etc/xrd.cf.quarkdb -l /var/log/eos/xrdlog.qdb -b -Rdaemon
    - eos-ns-quarkdb-tests
    - cp /usr/sbin/qclient-tests . && GTEST_DEATH_TEST_USE_FORK=1 ./qclient-tests
  needs:
    - job: el9_docker_image
      artifacts: false
  retry: 1
  tags:
     - docker_node
     - dock


unit_test:tag:
  extends: .unit_test_template
  image:
    name: gitlab-registry.cern.ch/dss/eos/eos-ci:${CI_COMMIT_TAG}${OS_TAG}
    entrypoint: ["/bin/bash", "-c"]
  only:
    - tags


unit_test:
  extends: .unit_test_template
  image:
    name: gitlab-registry.cern.ch/dss/eos/eos-ci:${CI_COMMIT_SHORT_SHA}${OS_TAG}
    entrypoint: ["/bin/bash", "-c"]
  except:
    - tags


unit_test_asan:
  extends: .unit_test_template
  image:
    name: gitlab-registry.cern.ch/dss/eos/eos-ci:${CI_COMMIT_SHORT_SHA}${OS_TAG}${EXTRA_TAG}
    entrypoint: ["/bin/bash", "-c"]
  variables:
    LSAN_OPTIONS: "suppressions=/var/eos/test/LeakSanitizer.supp"  # Suppress known memory leaks. For the generic tests
    ASAN_OPTIONS: "fast_unwind_on_malloc=0"  # Avoid indirect leaks from linked dependencies. For the namespace tests
    EXTRA_TAG: "_asan"
  needs:
    - job: el9_asan_docker_image
      artifacts: false
  when: manual
  allow_failure: true


#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------

.publish_koji_template: &publish_koji_template_definition
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/rpmci/kojicli
  script:
    - yum install --nogpg -y sssd-client
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    # KOJI_SCRATCH will be set for branches and empty for tags
    - koji build ${KOJI_SCRATCH} ${TARGET} ${BUILD_NAME}_artifacts/SRPMS/*.src.rpm
  tags:
    - docker_node
    - publish
  when: manual


publish_koji_al8:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos8al"
    BUILD_NAME: "el-8"
  dependencies:
    - build_el8


publish_koji_al9:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos9al"
    BUILD_NAME: "el-9"
  dependencies:
    - build_el9


publish_koji_al10:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos10al"
    BUILD_NAME: "el-10"
  dependencies:
    - build_el10


publish_koji_rh-8:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos8el"
    BUILD_NAME: "rh-8"
  only:
    - schedules
    - tags
  needs:
    - job: rh-8


publish_koji_rh-9:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos9el"
    BUILD_NAME: "rh-9"
  only:
    - schedules
    - tags
  needs:
    - job: rh-9


publish_koji_rh-10:
  <<: *publish_koji_template_definition
  variables:
    TARGET: "eos10el"
    BUILD_NAME: "rh-10"
  only:
    - schedules
    - tags
  needs:
    - job: rh-10



email_notification:
   stage: publish
   image: gitlab-registry.cern.ch/linuxsupport/alma9-base
   variables:
     ENV: production
     TO_ADDRS: project-eos-commits@cern.ch,lxbatch-experts@cern.ch
   script:
     - dnf install -y git python pip
     - git clone https://token:$EOS_REPO_MAILSERVICE_TOKEN@gitlab.cern.ch/eos/eos-mailservices-code-samples.git
     - cd eos-mailservices-code-samples/Python/oauth2-samples; pip install --no-input -r requirements.txt
     - export EOS_VERSION=$CI_COMMIT_TAG
     - python -m oauth2_smtp
   needs:
     - job: publish_koji_al9
   only:
     - tags

notify_cta_project:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  needs:
    - job: el9_docker_image
      artifacts: false
  variables:
    CTA_BRANCH: main
  script:
    - dnf install --nogpg -y curl gawk jq
    - CTA_PROJECT_ID="139306"
    - CTA_PROJECT_API="https://gitlab.cern.ch/api/v4/projects/$CTA_PROJECT_ID"
    - TRIGGER_URL="$CTA_PROJECT_API/trigger/pipeline"
    # Construct EOS versions
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        EOS_IMAGE_TAG="$CI_COMMIT_SHORT_SHA.el9";
      else
        EOS_IMAGE_TAG="$CI_COMMIT_TAG.el9";
        EOS_VERSION="$CI_COMMIT_TAG";
      fi
    # Extract XRootD version from eos.spec.in
    - XROOTD_VERSION=$(grep '^%define xrootd_version_min' eos.spec.in | awk '{print $3}')
    # The locked XRootD version does not have the release included, while this is necessary to versionlock it correctly in the CTA pipeline
    - |
      if [[ "$XROOTD_VERSION" != *-* ]]; then
        XROOTD_VERSION="${XROOTD_VERSION}-1"
      fi
    # Get the latest stable CTA version
    - LATEST_CTA_VERSION=$(dnf -q --repofrompath=temprepo,https://cta-public-repo.web.cern.ch/stable/cta-5/el9/cta/x86_64/ --repo=temprepo repoquery --latest-limit=1 --qf "%{version}-%{release}" cta-taped)
    # Against an existing CTA tag, we can only trigger a pipeline where a different EOS image is used
    - echo "Triggering pipeline against CTA version $LATEST_CTA_VERSION with EOS image tag $EOS_IMAGE_TAG"
    - curl -X POST
          -F token=$CTA_TRIGGER_TOKEN
          -F ref=$CTA_BRANCH
          -F "variables[CUSTOM_EOS_IMAGE_TAG]=$EOS_IMAGE_TAG"
          -F "variables[CUSTOM_CTA_VERSION]=$LATEST_CTA_VERSION"
          -F "variables[PIPELINE_TYPE]=REGR_AGAINST_CTA_VERSION"
          $TRIGGER_URL
    # Against the CTA main branch, we can also test the client EOS and XRootD versions if we are on a (EOS) tag
    # If we are not on a (EOS) tag, the EOS RPMs are not accessible by the CTA pipeline, so we only test against the image
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        echo "Triggering pipeline against CTA main branch"
        echo "Using EOS image tag $EOS_IMAGE_TAG and XRootD version $XROOTD_VERSION"
        curl -X POST \
            -F token=$CTA_TRIGGER_TOKEN \
            -F ref=$CTA_BRANCH \
            -F "variables[CUSTOM_EOS_IMAGE_TAG]=$EOS_IMAGE_TAG" \
            -F "variables[CUSTOM_XROOTD_VERSION]=$XROOTD_VERSION" \
            -F "variables[PIPELINE_TYPE]=REGR_AGAINST_CTA_MAIN" \
            $TRIGGER_URL
      else
        echo "Triggering pipeline against CTA main branch"
        echo "Using EOS image tag $EOS_IMAGE_TAG, EOS client version $EOS_VERSION and XRootD version $XROOTD_VERSION"
        curl -X POST \
            -F token=$CTA_TRIGGER_TOKEN \
            -F ref=$CTA_BRANCH \
            -F "variables[CUSTOM_EOS_IMAGE_TAG]=$EOS_IMAGE_TAG" \
            -F "variables[CUSTOM_EOS_VERSION]=$EOS_VERSION" \
            -F "variables[CUSTOM_XROOTD_VERSION]=$XROOTD_VERSION" \
            -F "variables[PIPELINE_TYPE]=REGR_AGAINST_CTA_MAIN" \
            $TRIGGER_URL
      fi
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - when: manual
      allow_failure: true

rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - dnf install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${CODENAME} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  except:
    - tags
  allow_failure: true
  when: manual


rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - dnf install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${CODENAME} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  only:
    - master
    - tags
  retry: 1


rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - dnf install --nogpg -y sudo sssd-client createrepo
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${CODENAME} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${CODENAME} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${CODENAME}/tag/latest_version
  tags:
    - docker_node
    - publish
  only:
    - tags
  dependencies: []
  when: manual


#to be run after the rpm publish
.publish_dockerimage-template:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -n "$CI_COMMIT_TAG" ]]; then
        export REPOBRANCH="tag-testing";
        export DESTINATION="${IMAGE_REPO}:${CI_COMMIT_TAG}${OS_TAG}";
      else
        export REPOBRANCH="commit";
        export DESTINATION="${IMAGE_REPO}:${CI_COMMIT_SHORT_SHA}${OS_TAG}";
      fi
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=false --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR --build-arg=EOS_CODENAME="${CODENAME}" --build-arg=REPOBRANCH="${REPOBRANCH}" --compressed-caching=false --use-new-run
  retry: 1


el9_publish_dockerimage_all:
  extends: .publish_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/minimal/el9_minimal.Dockerfile
    IMAGE_REPO: "gitlab-registry.cern.ch/dss/eos/eos-all"
    OS_TAG: ".el9"
  needs:
    - job: clone_docker
    - job: build_el9
  allow_failure: true
  when: manual


el9_publish_dockerimage_fusex:
  extends: .publish_dockerimage-template
  variables:
    DOCKERFILE: eos-docker/minimal/el9_minimal.fusex-only.Dockerfile
    IMAGE_REPO: "gitlab-registry.cern.ch/dss/eos/eos-fusex"
    OS_TAG: ".el9"
  needs:
    - job: clone_docker
    - job: build_el9
  allow_failure: true
  when: manual


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - dnf install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  allow_failure: true
  only:
    - triggers
    - schedules
  tags:
    - docker_node


# get all the namespaces, filter out the "mgmt" ones, delete if older than 30h
clean_k8s_cluster:
  stage: clean
  image: alpine/k8s:1.18.2
  script:
    - export KUBECONFIG=$K8S_CONFIG
    - set +o pipefail
    - kubectl get namespaces --no-headers | grep -v 'default\|kube-node-lease\|kube-public\|kube-system\|magnum-tiller' |
        awk 'match($3,/[3-9][0-9]+h||[[:alnum:]]+d/) {print $1}' | xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  allow_failure: true
  only:
    - schedules
  tags:
    - docker_node
    - k8s


# @todo cleanup helm leftover for failed / hanging tests. May be merged to 'clean_k8s_cluster'
clean_helm_cluster:
  stage: clean
  image: gitlab-registry.cern.ch/dss/alpine-enhanced:3.13.5
  script:
    - export KUBECONFIG=$K8S_CONFIG
    - echo "Please, implement me!"
  dependencies: []
  allow_failure: true
  only:
    - schedules


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

.eos_nginx_build_template:
  stage: build:manual
  variables:
    PKG_MGR: dnf
  script:
    - ${PKG_MGR} install --nogpg -y gcc-c++ cmake make rpm-build which git sudo yum-utils createrepo sssd-client
    - cd nginx
    - ./makesrpm.sh
    - |
      if [[ ${PKG_MGR} == "yum" ]]; then
        ${PKG_MGR}-builddep -y --nogpgcheck *.src.rpm
      else
        ${PKG_MGR} install -y dnf-plugins-core
        ${PKG_MGR} builddep -y --nogpgcheck *.src.rpm
      fi
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}-depend/${BUILD_NAME}/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual


eos_nginx_el-8:
  extends: .eos_nginx_build_template
  image: gitlab-registry.cern.ch/linuxsupport/alma8-base
  variables:
    BUILD_NAME: el-8


eos_nginx_el-9:
  extends: .eos_nginx_build_template
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  variables:
    BUILD_NAME: el-9


#-------------------------------------------------------------------------------
# ALICE ApMon builds
#-------------------------------------------------------------------------------

.build-apmon-template: &build-apmon-template-definition
  stage: build:manual
  variables:
    PKG_MGR: dnf
  script:
    - ${PKG_MGR} install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo rsync tar gawk
    - cd ApMon; ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - |
      if [[ ${PKG_MGR} == "yum" ]]; then
        ${PKG_MGR}-builddep -y --nogpgcheck rpmbuild/SRPMS/eos-apmon-*.src.rpm
      else
        ${PKG_MGR} install -y dnf-plugins-core
        ${PKG_MGR} builddep -y --nogpgcheck rpmbuild/SRPMS/eos-apmon-*.src.rpm
      fi
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - sudo -u stci -H mkdir -p ${STORAGE_PATH}
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm ${STORAGE_PATH}
    - sudo -u stci -H createrepo --update -q ${STORAGE_PATH}
  tags:
    - docker_node
  when: manual


eos_apmon_el-8:
  image: gitlab-registry.cern.ch/linuxsupport/alma8-base
  variables:
    STORAGE_PATH: /eos/project/s/storage-ci/www/eos/${CODENAME}-depend/el-8/x86_64
  extends: .build-apmon-template


eos_apmon_el-9:
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  variables:
    STORAGE_PATH: /eos/project/s/storage-ci/www/eos/${CODENAME}-depend/el-9/x86_64
  extends: .build-apmon-template


eos_docs:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - yum install --nogpg -y make python3-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - cd diopside
    - make html
    - make html
    - sudo kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - sudo -u stci -H rm -rf /eos/project/e/eos/www/docs/diopside/*
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/diopside
  tags:
    - docker_node
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
      allow_failure: true
    - when: manual
      allow_failure: true


.eos_repopackage:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${CODENAME}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
