# ************************************************************************
# * EOS - the CERN Disk Storage System                                   *
# * Copyright (C) 2024 CERN/Switzerland                                  *
# *                                                                      *
# * This program is free software: you can redistribute it and/or modify *
# * it under the terms of the GNU General Public License as published by *
# * the Free Software Foundation, either version 3 of the License, or    *
# * (at your option) any later version.                                  *
# *                                                                      *
# * This program is distributed in the hope that it will be useful,      *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
# * GNU General Public License for more details.                         *
# *                                                                      *
# * You should have received a copy of the GNU General Public License    *
# * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
# ************************************************************************

#-------------------------------------------------------------------------------
# Ubuntu builds
#-------------------------------------------------------------------------------

.build-ubuntu: &build-ubuntu_definition
  stage: build:rpm
  variables:
    DEBIAN_FRONTEND: noninteractive
  script:
    - apt-get update
    - apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache gawk wget
    - wget -qO- http://storage-ci.web.cern.ch/storage-ci/storageci.key | tee /etc/apt/trusted.gpg.d/stci.asc
    - echo -e "\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/eos/${CODENAME} ${BUILD_NAME} ${BUILD_NAME}/tag" >> /etc/apt/sources.list
    - wget -qO- https://xrootd.web.cern.ch/repo/RPM-GPG-KEY.txt | tee /etc/apt/trusted.gpg.d/xrootd.asc
    - echo -e "\ndeb https://xrootd.web.cern.ch/ubuntu ${BUILD_NAME} stable" >> /etc/apt/sources.list.d/xrootd.list
    - apt-get update
    - git submodule update --init -f --recursive
    # Priority >= 1000 causes a version to be installed even if this constitutes a downgrade of the package
    - EOS_XROOTD_VERSION=$(grep "define eos_xrootd_version_min" eos.spec.in | awk -F ':' '{print $2;}')
    - echo -e "Package:"" eos-xrootd* libeosxrd* libeosxrootd*\nPin:"" version $EOS_XROOTD_VERSION\nPin-Priority:"" 1000" > /etc/apt/preferences.d/eos-xrootd.pref
    - if [[ "${BUILD_NAME}" == "jammy" ]]; then PROCPS_LIB="libprocps-dev"; else PROCPS_LIB="libproc2-dev"; fi
    - sed -e "s/_XRD_DEB_VER_/$EOS_XROOTD_VERSION/g; s/_PROCPS_TAG_/${PROCPS_LIB}/g" debian/control.template > debian/control
    - mk-build-deps --build-dep debian/control
    - gdebi --n eos-build-deps-depends*.deb
    - EOS_VERSION="$(./genversion.sh)"; echo "${EOS_VERSION}"
    - dch --create -v "${EOS_VERSION}" --package eos --urgency low --distribution ${BUILD_NAME} -M "eos automated build."
    - if [[ -n "$CI_COMMIT_TAG" ]]; then
        export CCACHE_DISABLE=1;
      else
        source gitlab-ci/setup_ccache_deb.sh;
        export GRPC_BUILD_ENABLE_CCACHE=1;
      fi
    - dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages" --buildinfo-file="deb_packages/eos_${EOS_VERSION}_$(dpkg-architecture -qDEB_BUILD_ARCH).buildinfo" --changes-file="deb_packages/eos_${EOS_VERSION}_$(dpkg-architecture -qDEB_BUILD_ARCH).changes"
    - ccache -s
    - mkdir ${CI_JOB_NAME}; cp deb_packages/*.deb ${CI_JOB_NAME}
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${CI_JOB_NAME}
  dependencies: []
  allow_failure: true
  only:
    - schedules
    - tags
    - master


ubuntu-jammy:
  extends: .build-ubuntu
  image: registry.cern.ch/docker.io/ubuntu:jammy
  variables:
    BUILD_NAME: jammy


ubuntu-noble:
  extends: .build-ubuntu
  image: registry.cern.ch/docker.io/ubuntu:noble
  variables:
    BUILD_NAME: noble


ubuntu-noble-arm:
  extends: .build-ubuntu
  image: registry.cern.ch/docker.io/ubuntu:noble
  variables:
    BUILD_NAME: noble
  tags:
    - arm64

#-------------------------------------------------------------------------------
# Ubuntu artifacts publishing
#-------------------------------------------------------------------------------

publish_debian:
  stage: publish
  image: registry.cern.ch/docker.io/ubuntu:noble
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd reprepro
    - mkdir /home/stci; chown -R stci:def-cg /home/stci; chmod -R 700 /home/stci;
    - export GNUPGHOME=/home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H -E gpg --import $STCI_REPO_KEY
    - sudo -u stci -H -E ./gitlab-ci/publish_deb.sh ${BUILD_TYPE}
  allow_failure: true
  needs:
    - job: ubuntu-jammy
    - job: ubuntu-noble
  tags:
    - docker_node
    - publish
  only:
    - schedules
    - tags


.clean_debian_artifacts:
  stage: clean
  image: registry.cern.ch/docker.io/ubuntu:noble
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci; chown -R stci:def-cg /home/stci; chmod -R 700 /home/stci;
    - export GNUPGHOME=/home/stci
    - sudo -u stci -H gpg --import $STCI_REPO_KEY; fi
    - sudo -u stci -H -E ./gitlab-ci/remove_old_artifacts_debian.sh
  allow_failure: true
  only:
    - schedules
  tags:
    - docker_node
